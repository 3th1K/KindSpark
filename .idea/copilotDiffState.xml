<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.ksp)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.kindspark&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.kindspark&quot;&#10;        minSdk = 24&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;&#10;    // Room database&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    ksp(libs.androidx.room.compiler)&#10;&#10;    // WorkManager for notifications&#10;    implementation(libs.androidx.work.runtime.ktx)&#10;&#10;    // Navigation Compose&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel Compose&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // DataStore for preferences&#10;    implementation(libs.androidx.datastore.preferences)&#10;&#10;    // Lottie for animations&#10;    implementation(&quot;com.airbnb.android:lottie-compose:6.1.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessDatabase.kt" />
              <option name="originalContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import androidx.room.TypeConverters&#10;import android.content.Context&#10;&#10;@Database(&#10;    entities = [KindnessPrompt::class, KindnessCompletion::class, SkippedPrompt::class],&#10;    version = 2,&#10;    exportSchema = false&#10;)&#10;abstract class KindnessDatabase : RoomDatabase() {&#10;&#10;    abstract fun kindnessDao(): KindnessPromptDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: KindnessDatabase? = null&#10;&#10;        fun getDatabase(context: Context): KindnessDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    KindnessDatabase::class.java,&#10;                    &quot;kindness_database&quot;&#10;                ).build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import androidx.room.TypeConverters&#10;import android.content.Context&#10;&#10;@Database(&#10;    entities = [KindnessPrompt::class, KindnessCompletion::class, SkippedPrompt::class, UserProgress::class],&#10;    version = 3,&#10;    exportSchema = false&#10;)&#10;abstract class KindnessDatabase : RoomDatabase() {&#10;&#10;    abstract fun kindnessDao(): KindnessPromptDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: KindnessDatabase? = null&#10;&#10;        fun getDatabase(context: Context): KindnessDatabase {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    KindnessDatabase::class.java,&#10;                    &quot;kindness_database&quot;&#10;                ).build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessPrompt.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessPrompt.kt" />
              <option name="originalContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import java.time.LocalDate&#10;&#10;@Entity(tableName = &quot;kindness_prompts&quot;)&#10;data class KindnessPrompt(&#10;    @PrimaryKey val id: Int,&#10;    val text: String,&#10;    val category: String = &quot;general&quot;&#10;)&#10;&#10;@Entity(tableName = &quot;kindness_completions&quot;)&#10;data class KindnessCompletion(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val promptId: Int,&#10;    val completedDate: String, // Using String to store LocalDate as YYYY-MM-DD&#10;    val isFavorite: Boolean = false,&#10;    val notes: String = &quot;&quot;&#10;)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;import java.time.LocalDate&#10;&#10;@Entity(tableName = &quot;kindness_prompts&quot;)&#10;data class KindnessPrompt(&#10;    @PrimaryKey val id: Int,&#10;    val text: String,&#10;    val category: String = &quot;general&quot;&#10;)&#10;&#10;@Entity(tableName = &quot;kindness_completions&quot;)&#10;data class KindnessCompletion(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val promptId: Int,&#10;    val completedDate: String, // Using String to store LocalDate as YYYY-MM-DD&#10;    val isFavorite: Boolean = false,&#10;    val notes: String = &quot;&quot;&#10;)&#10;&#10;@Entity(tableName = &quot;skipped_prompts&quot;)&#10;data class SkippedPrompt(&#10;    @PrimaryKey(autoGenerate = true)&#10;    val id: Long = 0,&#10;    val promptId: Int,&#10;    val skippedDate: String, // Using String to store LocalDate as YYYY-MM-DD&#10;    val reason: String = &quot;&quot; // Optional reason for skipping&#10;)&#10;&#10;data class KindnessPromptWithCompletion(&#10;    val prompt: KindnessPrompt,&#10;    val completion: KindnessCompletion?&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessPromptDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessPromptDao.kt" />
              <option name="originalContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.*&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface KindnessPromptDao {&#10;&#10;    @Query(&quot;SELECT * FROM kindness_prompts&quot;)&#10;    suspend fun getAllPrompts(): List&lt;KindnessPrompt&gt;&#10;&#10;    @Query(&quot;SELECT * FROM kindness_prompts WHERE id = :id&quot;)&#10;    suspend fun getPromptById(id: Int): KindnessPrompt?&#10;&#10;    @Query(&quot;SELECT * FROM kindness_completions ORDER BY completedDate DESC&quot;)&#10;    fun getAllCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM kindness_completions WHERE completedDate = :date&quot;)&#10;    suspend fun getCompletionByDate(date: String): KindnessCompletion?&#10;&#10;    @Query(&quot;SELECT * FROM kindness_completions WHERE isFavorite = 1 ORDER BY completedDate DESC&quot;)&#10;    fun getFavoriteCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.IGNORE)&#10;    suspend fun insertPrompts(prompts: List&lt;KindnessPrompt&gt;)&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCompletion(completion: KindnessCompletion): Long&#10;&#10;    @Update&#10;    suspend fun updateCompletion(completion: KindnessCompletion)&#10;&#10;    @Delete&#10;    suspend fun deleteCompletion(completion: KindnessCompletion)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM kindness_completions WHERE completedDate BETWEEN :startDate AND :endDate&quot;)&#10;    suspend fun getCompletionCountBetweenDates(startDate: String, endDate: String): Int&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM kindness_prompts&quot;)&#10;    suspend fun getPromptCount(): Int&#10;&#10;    // Skipped prompts methods&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertSkippedPrompt(skippedPrompt: SkippedPrompt): Long&#10;&#10;    @Query(&quot;SELECT * FROM skipped_prompts WHERE skippedDate = :date&quot;)&#10;    suspend fun getSkippedPromptsByDate(date: String): List&lt;SkippedPrompt&gt;&#10;&#10;    @Query(&quot;SELECT promptId FROM skipped_prompts WHERE skippedDate = :date&quot;)&#10;    suspend fun getSkippedPromptIdsByDate(date: String): List&lt;Int&gt;&#10;&#10;    @Query(&quot;DELETE FROM skipped_prompts WHERE skippedDate &lt; :cutoffDate&quot;)&#10;    suspend fun deleteOldSkippedPrompts(cutoffDate: String)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.*&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface KindnessPromptDao {&#10;&#10;    @Query(&quot;SELECT * FROM kindness_prompts&quot;)&#10;    suspend fun getAllPrompts(): List&lt;KindnessPrompt&gt;&#10;&#10;    @Query(&quot;SELECT * FROM kindness_prompts WHERE id = :id&quot;)&#10;    suspend fun getPromptById(id: Int): KindnessPrompt?&#10;&#10;    @Query(&quot;SELECT * FROM kindness_completions ORDER BY completedDate DESC&quot;)&#10;    fun getAllCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM kindness_completions WHERE completedDate = :date&quot;)&#10;    suspend fun getCompletionByDate(date: String): KindnessCompletion?&#10;&#10;    @Query(&quot;SELECT * FROM kindness_completions WHERE isFavorite = 1 ORDER BY completedDate DESC&quot;)&#10;    fun getFavoriteCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.IGNORE)&#10;    suspend fun insertPrompts(prompts: List&lt;KindnessPrompt&gt;)&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertCompletion(completion: KindnessCompletion): Long&#10;&#10;    @Update&#10;    suspend fun updateCompletion(completion: KindnessCompletion)&#10;&#10;    @Delete&#10;    suspend fun deleteCompletion(completion: KindnessCompletion)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM kindness_completions WHERE completedDate BETWEEN :startDate AND :endDate&quot;)&#10;    suspend fun getCompletionCountBetweenDates(startDate: String, endDate: String): Int&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM kindness_prompts&quot;)&#10;    suspend fun getPromptCount(): Int&#10;&#10;    // Skipped prompts methods&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertSkippedPrompt(skippedPrompt: SkippedPrompt): Long&#10;&#10;    @Query(&quot;SELECT * FROM skipped_prompts WHERE skippedDate = :date&quot;)&#10;    suspend fun getSkippedPromptsByDate(date: String): List&lt;SkippedPrompt&gt;&#10;&#10;    @Query(&quot;SELECT promptId FROM skipped_prompts WHERE skippedDate = :date&quot;)&#10;    suspend fun getSkippedPromptIdsByDate(date: String): List&lt;Int&gt;&#10;&#10;    @Query(&quot;DELETE FROM skipped_prompts WHERE skippedDate &lt; :cutoffDate&quot;)&#10;    suspend fun deleteOldSkippedPrompts(cutoffDate: String)&#10;&#10;    // UserProgress methods&#10;    @Query(&quot;SELECT * FROM user_progress WHERE id = 1&quot;)&#10;    suspend fun getUserProgress(): UserProgress?&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertOrUpdateUserProgress(userProgress: UserProgress)&#10;&#10;    @Query(&quot;UPDATE user_progress SET currentStreak = :streak, lastCompletedDate = :date WHERE id = 1&quot;)&#10;    suspend fun updateStreak(streak: Int, date: String)&#10;&#10;    @Query(&quot;UPDATE user_progress SET bestStreak = :bestStreak WHERE id = 1&quot;)&#10;    suspend fun updateBestStreak(bestStreak: Int)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/KindnessRepository.kt" />
              <option name="originalContent" value="package com.example.kindspark.data&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import kotlin.random.Random&#10;&#10;class KindnessRepository(private val dao: KindnessPromptDao) {&#10;&#10;    private val dateFormatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;&#10;    // Pre-defined kindness prompts&#10;    private val defaultPrompts = listOf(&#10;        KindnessPrompt(1, &quot;Compliment someone genuinely.&quot;, &quot;social&quot;),&#10;        KindnessPrompt(2, &quot;Call or text a family member to check on them.&quot;, &quot;family&quot;),&#10;        KindnessPrompt(3, &quot;Help a stranger today in any small way.&quot;, &quot;community&quot;),&#10;        KindnessPrompt(4, &quot;Leave a positive comment on social media.&quot;, &quot;digital&quot;),&#10;        KindnessPrompt(5, &quot;Pick up litter you see on the ground.&quot;, &quot;environment&quot;),&#10;        KindnessPrompt(6, &quot;Support a local business with kind words or a review.&quot;, &quot;community&quot;),&#10;        KindnessPrompt(7, &quot;Hold the door open for someone.&quot;, &quot;courtesy&quot;),&#10;        KindnessPrompt(8, &quot;Write a short thank-you note to someone.&quot;, &quot;gratitude&quot;),&#10;        KindnessPrompt(9, &quot;Donate clothes or items you no longer need.&quot;, &quot;charity&quot;),&#10;        KindnessPrompt(10, &quot;Smile at a stranger and say hello.&quot;, &quot;social&quot;),&#10;        KindnessPrompt(11, &quot;Let someone go ahead of you in line.&quot;, &quot;courtesy&quot;),&#10;        KindnessPrompt(12, &quot;Offer to help a coworker with their tasks.&quot;, &quot;workplace&quot;),&#10;        KindnessPrompt(13, &quot;Send an encouraging message to a friend.&quot;, &quot;friendship&quot;),&#10;        KindnessPrompt(14, &quot;Pay for someone's coffee or meal.&quot;, &quot;generosity&quot;),&#10;        KindnessPrompt(15, &quot;Volunteer for a local charity or cause.&quot;, &quot;community&quot;),&#10;        KindnessPrompt(16, &quot;Listen actively to someone who needs to talk.&quot;, &quot;empathy&quot;),&#10;        KindnessPrompt(17, &quot;Forgive someone who has wronged you.&quot;, &quot;forgiveness&quot;),&#10;        KindnessPrompt(18, &quot;Share your knowledge or skills with others.&quot;, &quot;teaching&quot;),&#10;        KindnessPrompt(19, &quot;Give a genuine compliment to a service worker.&quot;, &quot;appreciation&quot;),&#10;        KindnessPrompt(20, &quot;Plant a flower or tree in your community.&quot;, &quot;environment&quot;)&#10;    )&#10;&#10;    suspend fun initializeDatabase() {&#10;        val promptCount = dao.getPromptCount()&#10;        if (promptCount == 0) {&#10;            dao.insertPrompts(defaultPrompts)&#10;        }&#10;    }&#10;&#10;    suspend fun getDailyPrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val dateString = date.format(dateFormatter)&#10;&#10;        // Check if there's already a completion for today&#10;        val existingCompletion = dao.getCompletionByDate(dateString)&#10;&#10;        if (existingCompletion != null) {&#10;            // Return the prompt that was already completed today&#10;            val prompt = dao.getPromptById(existingCompletion.promptId)&#10;            return KindnessPromptWithCompletion(prompt!!, existingCompletion)&#10;        }&#10;&#10;        // Get all prompts and select one randomly&#10;        val allPrompts = dao.getAllPrompts()&#10;        if (allPrompts.isEmpty()) {&#10;            initializeDatabase()&#10;            return getDailyPrompt(date)&#10;        }&#10;&#10;        // Use date as seed for consistent daily prompt&#10;        val seed = date.toEpochDay()&#10;        val randomPrompt = allPrompts[Random(seed).nextInt(allPrompts.size)]&#10;&#10;        return KindnessPromptWithCompletion(randomPrompt, null)&#10;    }&#10;&#10;    suspend fun markPromptAsCompleted(promptId: Int, date: LocalDate = LocalDate.now(), notes: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;        val completion = KindnessCompletion(&#10;            promptId = promptId,&#10;            completedDate = dateString,&#10;            notes = notes&#10;        )&#10;        return dao.insertCompletion(completion)&#10;    }&#10;&#10;    suspend fun toggleFavorite(completion: KindnessCompletion) {&#10;        val updatedCompletion = completion.copy(isFavorite = !completion.isFavorite)&#10;        dao.updateCompletion(updatedCompletion)&#10;    }&#10;&#10;    fun getAllCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt; {&#10;        return dao.getAllCompletions()&#10;    }&#10;&#10;    fun getFavoriteCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt; {&#10;        return dao.getFavoriteCompletions()&#10;    }&#10;&#10;    suspend fun getPromptById(id: Int): KindnessPrompt? {&#10;        return dao.getPromptById(id)&#10;    }&#10;&#10;    suspend fun getCurrentStreak(): Int {&#10;        val today = LocalDate.now()&#10;        var currentDate = today&#10;        var currentDate = today&#10;                currentDate = currentDate.minusDays(1)&#10;            val dateString = currentDate.format(dateFormatter)&#10;                currentDate = currentDate.minusDays(1)&#10;            val dateString = currentDate.format(dateFormatter)&#10;                currentDate = currentDate.minusDays(1)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;                currentDate = currentDate.minusDays(1)&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;                currentDate = currentDate.minusDays(1)&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun skipPrompt(promptId: Int, date: LocalDate = LocalDate.now(), reason: String = &quot;&quot;): Long {&#10;        val dateString = date.format(dateFormatter)&#10;        val seed = date.toEpochDay()&#10;    private fun getRandomPromptFromAll(allPrompts: List&lt;KindnessPrompt&gt;, date: LocalDate): KindnessPromptWithCompletion {&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val dateString = date.format(dateFormatter)&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;        val dateString = date.format(dateFormatter)&#10;        val cutoffDate = LocalDate.now().minusDays(daysToKeep.toLong())&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;        val cutoffDate = LocalDate.now().minusDays(daysToKeep.toLong())&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;        val cutoffDateString = cutoffDate.format(dateFormatter)&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;        val seed = date.toEpochDay()&#10;    private fun getRandomPromptFromAll(allPrompts: List&lt;KindnessPrompt&gt;, date: LocalDate): KindnessPromptWithCompletion {&#10;        val seed = date.toEpochDay()&#10;    private fun getRandomPromptFromAll(allPrompts: List&lt;KindnessPrompt&gt;, date: LocalDate): KindnessPromptWithCompletion {&#10;        val seed = date.toEpochDay()&#10;    private fun getRandomPromptFromAll(allPrompts: List&lt;KindnessPrompt&gt;, date: LocalDate): KindnessPromptWithCompletion {&#10;        val seed = date.toEpochDay()&#10;        val cutoffDateString = cutoffDate.format(dateFormatter)&#10;        val cutoffDate = LocalDate.now().minusDays(daysToKeep.toLong())&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;        val cutoffDate = LocalDate.now().minusDays(daysToKeep.toLong())&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;        val cutoffDate = LocalDate.now().minusDays(daysToKeep.toLong())&#10;        val seed = date.toEpochDay() + skippedTodayIds.size&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;    suspend fun getNextAvailablePrompt(date: LocalDate = LocalDate.now()): KindnessPromptWithCompletion {&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.data&#10;&#10;import kotlinx.coroutines.flow.Flow&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import kotlin.random.Random&#10;&#10;class KindnessRepository(private val dao: KindnessPromptDao) {&#10;&#10;    private val dateFormatter = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;&#10;    // Pre-defined kindness prompts&#10;    private val defaultPrompts = listOf(&#10;        KindnessPrompt(1, &quot;Compliment someone genuinely.&quot;, &quot;social&quot;),&#10;        KindnessPrompt(2, &quot;Call or text a family member to check on them.&quot;, &quot;family&quot;),&#10;        KindnessPrompt(3, &quot;Help a stranger today in any small way.&quot;, &quot;community&quot;),&#10;        KindnessPrompt(4, &quot;Leave a positive comment on social media.&quot;, &quot;digital&quot;),&#10;        KindnessPrompt(5, &quot;Pick up litter you see on the ground.&quot;, &quot;environment&quot;),&#10;        KindnessPrompt(6, &quot;Support a local business with kind words or a review.&quot;, &quot;community&quot;),&#10;        KindnessPrompt(7, &quot;Hold the door open for someone.&quot;, &quot;courtesy&quot;),&#10;        KindnessPrompt(8, &quot;Write a short thank-you note to someone.&quot;, &quot;gratitude&quot;),&#10;        KindnessPrompt(9, &quot;Donate clothes or items you no longer need.&quot;, &quot;charity&quot;),&#10;        KindnessPrompt(10, &quot;Smile at a stranger and say hello.&quot;, &quot;social&quot;),&#10;        KindnessPrompt(11, &quot;Let someone go ahead of you in line.&quot;, &quot;courtesy&quot;),&#10;        KindnessPrompt(12, &quot;Offer to help a coworker with their tasks.&quot;, &quot;workplace&quot;),&#10;        KindnessPrompt(13, &quot;Send an encouraging message to a friend.&quot;, &quot;friendship&quot;),&#10;        KindnessPrompt(14, &quot;Pay for someone's coffee or meal.&quot;, &quot;generosity&quot;),&#10;        KindnessPrompt(15, &quot;Volunteer for a local charity or cause.&quot;, &quot;community&quot;),&#10;        KindnessPrompt(16, &quot;Listen actively to someone who needs to talk.&quot;, &quot;empathy&quot;),&#10;        KindnessPrompt(17, &quot;Forgive someone who has wronged you.&quot;, &quot;forgiveness&quot;),&#10;        KindnessPrompt(18, &quot;Share your knowledge or skills with others.&quot;, &quot;teaching&quot;),&#10;        KindnessPrompt(19, &quot;Give a genuine compliment to a service worker.&quot;, &quot;appreciation&quot;),&#10;        KindnessPrompt(20, &quot;Plant a flower or tree in your community.&quot;, &quot;environment&quot;)&#10;    )&#10;&#10;    suspend fun initializeDatabase() {&#10;        val promptCount = dao.getPromptCount()&#10;        if (promptCount == 0) {&#10;            dao.insertPrompts(defaultPrompts)&#10;        }&#10;    }&#10;&#10;    suspend fun getDailyPrompt(date: Date = Date()): KindnessPromptWithCompletion {&#10;        val dateString = dateFormatter.format(date)&#10;&#10;        // Check if there's already a completion for today&#10;        val existingCompletion = dao.getCompletionByDate(dateString)&#10;&#10;        if (existingCompletion != null) {&#10;            // Return the prompt that was already completed today&#10;            val prompt = dao.getPromptById(existingCompletion.promptId)&#10;            return KindnessPromptWithCompletion(prompt!!, existingCompletion)&#10;        }&#10;&#10;        // Get all prompts and select one randomly&#10;        val allPrompts = dao.getAllPrompts()&#10;        if (allPrompts.isEmpty()) {&#10;            initializeDatabase()&#10;            return getDailyPrompt(date)&#10;        }&#10;&#10;        // Use date as seed for consistent daily prompt&#10;        val seed = date.time&#10;        val randomPrompt = allPrompts[Random(seed).nextInt(allPrompts.size)]&#10;&#10;        return KindnessPromptWithCompletion(randomPrompt, null)&#10;    }&#10;&#10;    suspend fun markPromptAsCompleted(promptId: Int, date: Date = Date(), notes: String = &quot;&quot;): Long {&#10;        val dateString = dateFormatter.format(date)&#10;        val completion = KindnessCompletion(&#10;            promptId = promptId,&#10;            completedDate = dateString,&#10;            notes = notes&#10;        )&#10;        return dao.insertCompletion(completion)&#10;    }&#10;&#10;    suspend fun toggleFavorite(completion: KindnessCompletion) {&#10;        val updatedCompletion = completion.copy(isFavorite = !completion.isFavorite)&#10;        dao.updateCompletion(updatedCompletion)&#10;    }&#10;&#10;    fun getAllCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt; {&#10;        return dao.getAllCompletions()&#10;    }&#10;&#10;    fun getFavoriteCompletions(): Flow&lt;List&lt;KindnessCompletion&gt;&gt; {&#10;        return dao.getFavoriteCompletions()&#10;    }&#10;&#10;    suspend fun getPromptById(id: Int): KindnessPrompt? {&#10;        return dao.getPromptById(id)&#10;    }&#10;&#10;    suspend fun getCurrentStreak(): Int {&#10;        val today = Date()&#10;        val calendar = Calendar.getInstance()&#10;        var streak = 0&#10;        &#10;        calendar.time = today&#10;&#10;        // Check backwards from today to find consecutive days&#10;        while (true) {&#10;            val dateString = dateFormatter.format(calendar.time)&#10;            val completion = dao.getCompletionByDate(dateString)&#10;&#10;            if (completion != null) {&#10;                streak++&#10;                calendar.add(Calendar.DAY_OF_MONTH, -1) // Go back one day&#10;            } else {&#10;                break&#10;            }&#10;        }&#10;&#10;        return streak&#10;    }&#10;&#10;    suspend fun skipPrompt(promptId: Int, date: Date = Date(), reason: String = &quot;&quot;): Long {&#10;        val dateString = dateFormatter.format(date)&#10;        val skippedPrompt = SkippedPrompt(&#10;            promptId = promptId,&#10;            skippedDate = dateString,&#10;            reason = reason&#10;        )&#10;        return dao.insertSkippedPrompt(skippedPrompt)&#10;    }&#10;&#10;    suspend fun getNextAvailablePrompt(date: Date = Date()): KindnessPromptWithCompletion {&#10;        val dateString = dateFormatter.format(date)&#10;&#10;        // Get all prompts&#10;        val allPrompts = dao.getAllPrompts()&#10;        if (allPrompts.isEmpty()) {&#10;            initializeDatabase()&#10;            return getNextAvailablePrompt(date)&#10;        }&#10;&#10;        // Get prompts that have been skipped today&#10;        val skippedTodayIds = dao.getSkippedPromptIdsByDate(dateString)&#10;&#10;        // Filter out skipped prompts&#10;        val availablePrompts = allPrompts.filter { it.id !in skippedTodayIds }&#10;&#10;        if (availablePrompts.isEmpty()) {&#10;            // If all prompts have been skipped, clear today's skips and start over&#10;            // This prevents users from being stuck with no prompts&#10;            return getRandomPromptFromAll(allPrompts, date)&#10;        }&#10;&#10;        // Use date as seed for consistent selection, but add skip count to vary selection&#10;        val seed = date.time + skippedTodayIds.size&#10;        val selectedPrompt = availablePrompts[Random(seed).nextInt(availablePrompts.size)]&#10;&#10;        return KindnessPromptWithCompletion(selectedPrompt, null)&#10;    }&#10;&#10;    private fun getRandomPromptFromAll(allPrompts: List&lt;KindnessPrompt&gt;, date: Date): KindnessPromptWithCompletion {&#10;        val seed = date.time&#10;        val randomPrompt = allPrompts[Random(seed).nextInt(allPrompts.size)]&#10;        return KindnessPromptWithCompletion(randomPrompt, null)&#10;    }&#10;&#10;    suspend fun cleanupOldSkippedPrompts(daysToKeep: Int = 7) {&#10;        val calendar = Calendar.getInstance()&#10;        calendar.add(Calendar.DAY_OF_MONTH, -daysToKeep)&#10;        val cutoffDateString = dateFormatter.format(calendar.time)&#10;        dao.deleteOldSkippedPrompts(cutoffDateString)&#10;    }&#10;&#10;    // UserProgress and Streak Management&#10;    suspend fun getUserProgress(): UserProgress {&#10;        return dao.getUserProgress() ?: UserProgress(&#10;            id = 1,&#10;            currentStreak = 0,&#10;            bestStreak = 0,&#10;            lastCompletedDate = &quot;&quot;,&#10;            totalCompleted = 0,&#10;            startDate = dateFormatter.format(Date())&#10;        ).also {&#10;            dao.insertOrUpdateUserProgress(it)&#10;        }&#10;    }&#10;&#10;    suspend fun updateStreakOnCompletion(completionDate: Date = Date()): UserProgress {&#10;        val currentProgress = getUserProgress()&#10;        val completionDateString = dateFormatter.format(completionDate)&#10;&#10;        // Don't update streak if already completed today&#10;        if (currentProgress.lastCompletedDate == completionDateString) {&#10;            return currentProgress&#10;        }&#10;&#10;        val newStreak = when {&#10;            currentProgress.lastCompletedDate.isEmpty() -&gt; 1 // First completion&#10;            isConsecutiveDay(currentProgress.lastCompletedDate, completionDateString) -&gt; currentProgress.currentStreak + 1&#10;            else -&gt; 1 // Streak broken, start over&#10;        }&#10;&#10;        val newBestStreak = maxOf(newStreak, currentProgress.bestStreak)&#10;        val newTotalCompleted = currentProgress.totalCompleted + 1&#10;&#10;        val updatedProgress = currentProgress.copy(&#10;            currentStreak = newStreak,&#10;            bestStreak = newBestStreak,&#10;            lastCompletedDate = completionDateString,&#10;            totalCompleted = newTotalCompleted&#10;        )&#10;&#10;        dao.insertOrUpdateUserProgress(updatedProgress)&#10;        return updatedProgress&#10;    }&#10;&#10;    private fun isConsecutiveDay(lastCompletedDate: String, newCompletionDate: String): Boolean {&#10;        if (lastCompletedDate.isEmpty()) return false&#10;&#10;        try {&#10;            val lastDate = dateFormatter.parse(lastCompletedDate) ?: return false&#10;            val newDate = dateFormatter.parse(newCompletionDate) ?: return false&#10;            &#10;            val calendar = Calendar.getInstance()&#10;            calendar.time = lastDate&#10;            calendar.add(Calendar.DAY_OF_MONTH, 1) // Add one day to last date&#10;            &#10;            // Check if the new completion is exactly one day after the last completion&#10;            val expectedDate = dateFormatter.format(calendar.time)&#10;            return expectedDate == newCompletionDate&#10;        } catch (e: Exception) {&#10;            return false&#10;        }&#10;    }&#10;&#10;    suspend fun getStreakMilestones(currentStreak: Int): List&lt;Int&gt; {&#10;        // Return milestone numbers that were just reached&#10;        val milestones = listOf(3, 7, 14, 21, 30, 50, 100)&#10;        return milestones.filter { milestone -&gt;&#10;            currentStreak == milestone&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/UserProgress.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/UserProgress.kt" />
              <option name="updatedContent" value="package com.example.kindspark.data&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;user_progress&quot;)&#10;data class UserProgress(&#10;    @PrimaryKey val id: Int = 1, // Single row for user progress&#10;    val currentStreak: Int = 0,&#10;    val bestStreak: Int = 0,&#10;    val lastCompletedDate: String = &quot;&quot;, // YYYY-MM-DD format&#10;    val totalCompleted: Int = 0,&#10;    val startDate: String = &quot;&quot; // When user first started using the app&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/preferences/UserPreferencesManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/data/preferences/UserPreferencesManager.kt" />
              <option name="originalContent" value="package com.example.kindspark.data.preferences&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.*&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;&#10;private val Context.dataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;user_preferences&quot;)&#10;&#10;class UserPreferencesManager(private val context: Context) {&#10;&#10;    companion object {&#10;        private val NOTIFICATION_INTERVAL_KEY = intPreferencesKey(&quot;notification_interval&quot;)&#10;        private val NOTIFICATION_ENABLED_KEY = booleanPreferencesKey(&quot;notification_enabled&quot;)&#10;        private val NOTIFICATION_SOUND_KEY = booleanPreferencesKey(&quot;notification_sound&quot;)&#10;        private val DARK_MODE_KEY = booleanPreferencesKey(&quot;dark_mode&quot;)&#10;        private val SELECTED_THEME_KEY = stringPreferencesKey(&quot;selected_theme&quot;)&#10;        private val CALMING_BACKGROUND_KEY = booleanPreferencesKey(&quot;calming_background&quot;)&#10;        private val LOTTIE_ANIMATIONS_KEY = booleanPreferencesKey(&quot;lottie_animations&quot;)&#10;    }&#10;&#10;    enum class NotificationInterval(val hours: Int, val displayName: String) {&#10;        ONCE_DAILY(24, &quot;Once Daily&quot;),&#10;        EVERY_6_HOURS(6, &quot;Every 6 Hours&quot;),&#10;        EVERY_3_HOURS(3, &quot;Every 3 Hours&quot;),&#10;        EVERY_HOUR(1, &quot;Every Hour&quot;)&#10;    }&#10;&#10;    enum class AppTheme(val displayName: String) {&#10;        LIGHT(&quot;Light&quot;),&#10;        DARK(&quot;Dark&quot;),&#10;        SOFT_BLUE(&quot;Soft Blue&quot;),&#10;        SOFT_GREEN(&quot;Soft Green&quot;)&#10;    }&#10;&#10;    val notificationInterval: Flow&lt;NotificationInterval&gt; = context.dataStore.data.map { preferences -&gt;&#10;        val hours = preferences[NOTIFICATION_INTERVAL_KEY] ?: 24&#10;        NotificationInterval.values().find { it.hours == hours } ?: NotificationInterval.ONCE_DAILY&#10;    }&#10;&#10;    val notificationEnabled: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[NOTIFICATION_ENABLED_KEY] ?: true&#10;    }&#10;&#10;    val notificationSound: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[NOTIFICATION_SOUND_KEY] ?: true&#10;    }&#10;&#10;    val darkMode: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[DARK_MODE_KEY] ?: false&#10;    }&#10;&#10;    val selectedTheme: Flow&lt;AppTheme&gt; = context.dataStore.data.map { preferences -&gt;&#10;        val themeName = preferences[SELECTED_THEME_KEY] ?: &quot;LIGHT&quot;&#10;        AppTheme.values().find { it.name == themeName } ?: AppTheme.LIGHT&#10;    }&#10;&#10;    val calmingBackground: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[CALMING_BACKGROUND_KEY] ?: true&#10;    }&#10;&#10;    val lottieAnimations: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[LOTTIE_ANIMATIONS_KEY] ?: true&#10;    }&#10;&#10;    suspend fun updateNotificationInterval(interval: NotificationInterval) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[NOTIFICATION_INTERVAL_KEY] = interval.hours&#10;        }&#10;    }&#10;&#10;    suspend fun updateNotificationEnabled(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[NOTIFICATION_ENABLED_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateNotificationSound(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[NOTIFICATION_SOUND_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateDarkMode(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[DARK_MODE_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateSelectedTheme(theme: AppTheme) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[SELECTED_THEME_KEY] = theme.name&#10;        }&#10;    }&#10;&#10;    suspend fun updateCalmingBackground(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[CALMING_BACKGROUND_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateLottieAnimations(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[LOTTIE_ANIMATIONS_KEY] = enabled&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.data.preferences&#10;&#10;import android.content.Context&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.*&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;&#10;private val Context.dataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;user_preferences&quot;)&#10;&#10;class UserPreferencesManager(private val context: Context) {&#10;&#10;    companion object {&#10;        private val NOTIFICATION_INTERVAL_KEY = intPreferencesKey(&quot;notification_interval&quot;)&#10;        private val NOTIFICATION_ENABLED_KEY = booleanPreferencesKey(&quot;notification_enabled&quot;)&#10;        private val NOTIFICATION_SOUND_KEY = booleanPreferencesKey(&quot;notification_sound&quot;)&#10;        private val DARK_MODE_KEY = booleanPreferencesKey(&quot;dark_mode&quot;)&#10;        private val SELECTED_THEME_KEY = stringPreferencesKey(&quot;selected_theme&quot;)&#10;        private val CALMING_BACKGROUND_KEY = booleanPreferencesKey(&quot;calming_background&quot;)&#10;        private val LOTTIE_ANIMATIONS_KEY = booleanPreferencesKey(&quot;lottie_animations&quot;)&#10;    }&#10;&#10;    enum class NotificationInterval(val hours: Int, val displayName: String) {&#10;        ONCE_DAILY(24, &quot;Once Daily&quot;),&#10;        EVERY_6_HOURS(6, &quot;Every 6 Hours&quot;),&#10;        EVERY_3_HOURS(3, &quot;Every 3 Hours&quot;),&#10;        EVERY_HOUR(1, &quot;Every Hour&quot;)&#10;    }&#10;&#10;    enum class AppTheme(val displayName: String) {&#10;        LIGHT(&quot;Light&quot;),&#10;        DARK(&quot;Dark&quot;),&#10;        SOFT_BLUE(&quot;Soft Blue&quot;),&#10;        SOFT_GREEN(&quot;Soft Green&quot;)&#10;    }&#10;&#10;    val notificationInterval: Flow&lt;NotificationInterval&gt; = context.dataStore.data.map { preferences -&gt;&#10;        val hours = preferences[NOTIFICATION_INTERVAL_KEY] ?: 24&#10;        NotificationInterval.values().find { it.hours == hours } ?: NotificationInterval.ONCE_DAILY&#10;    }&#10;&#10;    val notificationEnabled: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[NOTIFICATION_ENABLED_KEY] ?: true&#10;    }&#10;&#10;    val notificationSound: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[NOTIFICATION_SOUND_KEY] ?: true&#10;    }&#10;&#10;    val darkMode: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[DARK_MODE_KEY] ?: false&#10;    }&#10;&#10;    val selectedTheme: Flow&lt;AppTheme&gt; = context.dataStore.data.map { preferences -&gt;&#10;        val themeName = preferences[SELECTED_THEME_KEY] ?: &quot;LIGHT&quot;&#10;        AppTheme.values().find { it.name == themeName } ?: AppTheme.LIGHT&#10;    }&#10;&#10;    val calmingBackground: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[CALMING_BACKGROUND_KEY] ?: true&#10;    }&#10;&#10;    val lottieAnimations: Flow&lt;Boolean&gt; = context.dataStore.data.map { preferences -&gt;&#10;        preferences[LOTTIE_ANIMATIONS_KEY] ?: true&#10;    }&#10;&#10;    suspend fun updateNotificationInterval(interval: NotificationInterval) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[NOTIFICATION_INTERVAL_KEY] = interval.hours&#10;        }&#10;    }&#10;&#10;    suspend fun updateNotificationEnabled(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[NOTIFICATION_ENABLED_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateNotificationSound(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[NOTIFICATION_SOUND_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateDarkMode(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[DARK_MODE_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateSelectedTheme(theme: AppTheme) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[SELECTED_THEME_KEY] = theme.name&#10;        }&#10;    }&#10;&#10;    suspend fun updateCalmingBackground(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[CALMING_BACKGROUND_KEY] = enabled&#10;        }&#10;    }&#10;&#10;    suspend fun updateLottieAnimations(enabled: Boolean) {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences[LOTTIE_ANIMATIONS_KEY] = enabled&#10;        }&#10;    }&#10;    &#10;    suspend fun resetToDefaults() {&#10;        context.dataStore.edit { preferences -&gt;&#10;            preferences.clear()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/notifications/NotificationScheduler.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/notifications/NotificationScheduler.kt" />
              <option name="updatedContent" value="package com.example.kindspark.notifications&#10;&#10;import android.content.Context&#10;import androidx.work.*&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import kotlinx.coroutines.flow.first&#10;import java.util.concurrent.TimeUnit&#10;&#10;class NotificationScheduler(&#10;    private val context: Context,&#10;    private val preferencesManager: UserPreferencesManager&#10;) {&#10;&#10;    companion object {&#10;        private const val KINDNESS_REMINDER_WORK = &quot;kindness_reminder_work&quot;&#10;    }&#10;&#10;    suspend fun scheduleNotifications() {&#10;        val isEnabled = preferencesManager.notificationEnabled.first()&#10;        val interval = preferencesManager.notificationInterval.first()&#10;&#10;        // Cancel existing work&#10;        WorkManager.getInstance(context).cancelUniqueWork(KINDNESS_REMINDER_WORK)&#10;&#10;        // Only schedule if notifications are enabled&#10;        if (!isEnabled) return&#10;&#10;        val constraints = Constraints.Builder()&#10;            .setRequiredNetworkType(NetworkType.NOT_REQUIRED)&#10;            .setRequiresBatteryNotLow(false)&#10;            .setRequiresCharging(false)&#10;            .build()&#10;&#10;        val workRequest = PeriodicWorkRequestBuilder&lt;NotificationWorker&gt;(&#10;            interval.hours.toLong(),&#10;            TimeUnit.HOURS,&#10;            // Add flex time for better battery optimization&#10;            15,&#10;            TimeUnit.MINUTES&#10;        )&#10;            .setConstraints(constraints)&#10;            .setBackoffCriteria(&#10;                BackoffPolicy.LINEAR,&#10;                WorkRequest.MIN_BACKOFF_MILLIS,&#10;                TimeUnit.MILLISECONDS&#10;            )&#10;            .build()&#10;&#10;        WorkManager.getInstance(context).enqueueUniquePeriodicWork(&#10;            KINDNESS_REMINDER_WORK,&#10;            ExistingPeriodicWorkPolicy.REPLACE,&#10;            workRequest&#10;        )&#10;    }&#10;&#10;    fun cancelNotifications() {&#10;        WorkManager.getInstance(context).cancelUniqueWork(KINDNESS_REMINDER_WORK)&#10;    }&#10;&#10;    suspend fun rescheduleNotifications() {&#10;        scheduleNotifications()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/notifications/NotificationWorker.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/notifications/NotificationWorker.kt" />
              <option name="updatedContent" value="package com.example.kindspark.notifications&#10;&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.os.Build&#10;import androidx.core.app.NotificationCompat&#10;import androidx.work.CoroutineWorker&#10;import androidx.work.WorkerParameters&#10;import com.example.kindspark.MainActivity&#10;import com.example.kindspark.R&#10;import com.example.kindspark.data.KindnessDatabase&#10;import com.example.kindspark.data.KindnessRepository&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import kotlin.random.Random&#10;&#10;class NotificationWorker(&#10;    context: Context,&#10;    params: WorkerParameters&#10;) : CoroutineWorker(context, params) {&#10;&#10;    companion object {&#10;        const val CHANNEL_ID = &quot;kindness_reminders&quot;&#10;        const val NOTIFICATION_ID = 1&#10;    }&#10;&#10;    override suspend fun doWork(): Result = withContext(Dispatchers.IO) {&#10;        try {&#10;            // Get a random kindness prompt&#10;            val database = KindnessDatabase.getDatabase(applicationContext)&#10;            val repository = KindnessRepository(database.kindnessDao())&#10;&#10;            // Initialize database if needed&#10;            repository.initializeDatabase()&#10;&#10;            // Get a random prompt for the notification&#10;            val prompts = database.kindnessDao().getAllPrompts()&#10;            if (prompts.isEmpty()) {&#10;                return@withContext Result.failure()&#10;            }&#10;&#10;            val randomPrompt = prompts[Random.nextInt(prompts.size)]&#10;&#10;            // Create and show notification&#10;            createNotificationChannel()&#10;            showNotification(randomPrompt.text)&#10;&#10;            Result.success()&#10;        } catch (e: Exception) {&#10;            Result.failure()&#10;        }&#10;    }&#10;&#10;    private fun createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                CHANNEL_ID,&#10;                &quot;Kindness Reminders&quot;,&#10;                NotificationManager.IMPORTANCE_DEFAULT&#10;            ).apply {&#10;                description = &quot;Daily reminders for acts of kindness&quot;&#10;                enableVibration(true)&#10;            }&#10;&#10;            val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;    }&#10;&#10;    private fun showNotification(promptText: String) {&#10;        val intent = Intent(applicationContext, MainActivity::class.java).apply {&#10;            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK&#10;        }&#10;&#10;        val pendingIntent = PendingIntent.getActivity(&#10;            applicationContext,&#10;            0,&#10;            intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;&#10;        val notification = NotificationCompat.Builder(applicationContext, CHANNEL_ID)&#10;            .setContentTitle(&quot;Time for Kindness ✨&quot;)&#10;            .setContentText(promptText)&#10;            .setStyle(NotificationCompat.BigTextStyle().bigText(promptText))&#10;            .setSmallIcon(android.R.drawable.ic_dialog_info) // Using system icon instead of custom&#10;            .setContentIntent(pendingIntent)&#10;            .setAutoCancel(true)&#10;            .build()&#10;&#10;        val notificationManager = applicationContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager&#10;        notificationManager.notify(NOTIFICATION_ID, notification)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/components/SettingsComponents.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/components/SettingsComponents.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.ui.components&#10;&#10;import androidx.compose.animation.*&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.ui.theme.*&#10;&#10;@Composable&#10;fun ModernSettingSection(&#10;    title: String,&#10;    isExpanded: Boolean,&#10;    onToggleExpanded: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    content: @Composable ColumnScope.() -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 8.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            // Section Header&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onToggleExpanded() }&#10;                    .padding(20.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = title,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;&#10;                Icon(&#10;                    imageVector = if (isExpanded) Icons.Default.KeyboardArrowUp else Icons.Default.KeyboardArrowDown,&#10;                    contentDescription = if (isExpanded) &quot;Collapse&quot; else &quot;Expand&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            }&#10;&#10;            // Section Content&#10;            AnimatedVisibility(&#10;                visible = isExpanded,&#10;                enter = expandVertically(&#10;                    animationSpec = tween(300, easing = EaseInOutCubic)&#10;                ) + fadeIn(animationSpec = tween(300)),&#10;                exit = shrinkVertically(&#10;                    animationSpec = tween(300, easing = EaseInOutCubic)&#10;                ) + fadeOut(animationSpec = tween(300))&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                ) {&#10;                    HorizontalDivider(&#10;                        modifier = Modifier.padding(horizontal = 20.dp),&#10;                        color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    content()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ModernSettingItem(&#10;    icon: ImageVector,&#10;    title: String,&#10;    subtitle: String,&#10;    modifier: Modifier = Modifier,&#10;    onClick: (() -&gt; Unit)? = null,&#10;    trailing: @Composable (() -&gt; Unit)? = null&#10;) {&#10;    Row(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .let { if (onClick != null) it.clickable { onClick() } else it }&#10;            .padding(horizontal = 20.dp, vertical = 12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Custom Icon Container&#10;        Box(&#10;            modifier = Modifier&#10;                .size(48.dp)&#10;                .background(&#10;                    brush = Brush.radialGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.primaryContainer,&#10;                            MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.6f)&#10;                        )&#10;                    ),&#10;                    shape = CircleShape&#10;                )&#10;                .clip(CircleShape),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = title,&#10;                tint = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.width(16.dp))&#10;&#10;        // Title and Subtitle&#10;        Column(&#10;            modifier = Modifier.weight(1f)&#10;        ) {&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                fontWeight = FontWeight.Medium,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Text(&#10;                text = subtitle,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;&#10;        // Trailing Content&#10;        trailing?.invoke()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ThemePreviewCard(&#10;    theme: UserPreferencesManager.AppTheme,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val borderColor = if (isSelected) {&#10;        MaterialTheme.colorScheme.primary&#10;    } else {&#10;        MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;    }&#10;&#10;    val borderWidth = if (isSelected) 2.dp else 1.dp&#10;&#10;    Card(&#10;        modifier = modifier&#10;            .size(width = 140.dp, height = 100.dp)&#10;            .border(borderWidth, borderColor, RoundedCornerShape(16.dp))&#10;            .clickable { onClick() },&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        )&#10;    ) {&#10;        Box(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            // Theme Preview Background&#10;            when (theme) {&#10;                UserPreferencesManager.AppTheme.LIGHT -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(&#10;                                Brush.verticalGradient(&#10;                                    colors = listOf(&#10;                                        Color(0xFFFFFBFE),&#10;                                        Color(0xFFE8F5E8)&#10;                                    )&#10;                                )&#10;                            )&#10;                    )&#10;                }&#10;                UserPreferencesManager.AppTheme.DARK -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(&#10;                                Brush.verticalGradient(&#10;                                    colors = listOf(&#10;                                        Color(0xFF1C1B1F),&#10;                                        Color(0xFF2E2E2E)&#10;                                    )&#10;                                )&#10;                            )&#10;                    )&#10;                }&#10;                UserPreferencesManager.AppTheme.SOFT_BLUE -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(&#10;                                Brush.verticalGradient(&#10;                                    colors = listOf(&#10;                                        SoftBlueLight.copy(alpha = 0.2f),&#10;                                        SoftBlue.copy(alpha = 0.1f)&#10;                                    )&#10;                                )&#10;                            )&#10;                    )&#10;                }&#10;                UserPreferencesManager.AppTheme.SOFT_GREEN -&gt; {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(&#10;                                Brush.verticalGradient(&#10;                                    colors = listOf(&#10;                                        KindnessGreenLight.copy(alpha = 0.2f),&#10;                                        KindnessGreen.copy(alpha = 0.1f)&#10;                                    )&#10;                                )&#10;                            )&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Theme Name&#10;            Text(&#10;                text = theme.displayName,&#10;                style = MaterialTheme.typography.labelMedium,&#10;                fontWeight = FontWeight.Medium,&#10;                color = when (theme) {&#10;                    UserPreferencesManager.AppTheme.DARK -&gt; Color.White&#10;                    else -&gt; MaterialTheme.colorScheme.onSurface&#10;                },&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(8.dp)&#10;            )&#10;&#10;            // Selected Indicator&#10;            if (isSelected) {&#10;                Icon(&#10;                    imageVector = Icons.Default.CheckCircle,&#10;                    contentDescription = &quot;Selected&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier&#10;                        .align(Alignment.TopEnd)&#10;                        .padding(8.dp)&#10;                        .size(20.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ResetSettingsButton(&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    OutlinedButton(&#10;        onClick = onClick,&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .padding(horizontal = 16.dp, vertical = 24.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = ButtonDefaults.outlinedButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.error&#10;        ),&#10;        border = BorderStroke(&#10;            1.dp,&#10;            MaterialTheme.colorScheme.error&#10;        )&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Refresh,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(18.dp)&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Text(&#10;            text = &quot;Reset to Default Settings&quot;,&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ModernSwitch(&#10;    checked: Boolean,&#10;    onCheckedChange: (Boolean) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Switch(&#10;        checked = checked,&#10;        onCheckedChange = onCheckedChange,&#10;        modifier = modifier,&#10;        colors = SwitchDefaults.colors(&#10;            checkedThumbColor = MaterialTheme.colorScheme.primary,&#10;            checkedTrackColor = MaterialTheme.colorScheme.primaryContainer,&#10;            uncheckedThumbColor = MaterialTheme.colorScheme.outline,&#10;            uncheckedTrackColor = MaterialTheme.colorScheme.surfaceVariant&#10;        )&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/home/HomeViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/home/HomeViewModel.kt" />
              <option name="originalContent" value="package com.example.kindspark.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.kindspark.data.KindnessCompletion&#10;import com.example.kindspark.data.KindnessPromptWithCompletion&#10;import com.example.kindspark.data.KindnessRepository&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.data.UserProgress&#10;import com.example.kindspark.notifications.NotificationScheduler&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import java.time.LocalDate&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;                    val updatedProgress = repository.updateStreakOnCompletion()&#10;                    val updatedProgress = repository.updateStreakOnCompletion()&#10;                    val updatedProgress = repository.updateStreakOnCompletion()&#10;                        completedDate = LocalDate.now().toString(),&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, LocalDate.now(), notes)&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.kindspark.data.KindnessCompletion&#10;import com.example.kindspark.data.KindnessPromptWithCompletion&#10;import com.example.kindspark.data.KindnessRepository&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.data.UserProgress&#10;import com.example.kindspark.notifications.NotificationScheduler&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;data class HomeUiState(&#10;    val dailyPrompt: KindnessPromptWithCompletion? = null,&#10;    val currentStreak: Int = 0,&#10;    val bestStreak: Int = 0,&#10;    val totalCompleted: Int = 0,&#10;    val isCompleted: Boolean = false,&#10;    val isLoading: Boolean = true,&#10;    val error: String? = null,&#10;    val showCelebration: Boolean = false,&#10;    val celebrationMilestone: Int? = null,&#10;    val userProgress: UserProgress? = null&#10;)&#10;&#10;class HomeViewModel(&#10;    private val repository: KindnessRepository,&#10;    private val preferencesManager: UserPreferencesManager,&#10;    private val notificationScheduler: NotificationScheduler&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(HomeUiState())&#10;    val uiState: StateFlow&lt;HomeUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadDailyPrompt()&#10;        loadCurrentStreak()&#10;    }&#10;&#10;    private fun loadDailyPrompt() {&#10;        viewModelScope.launch {&#10;            try {&#10;                _uiState.value = _uiState.value.copy(isLoading = true)&#10;&#10;                val promptWithCompletion = repository.getDailyPrompt()&#10;&#10;                _uiState.value = _uiState.value.copy(&#10;                    dailyPrompt = promptWithCompletion,&#10;                    isCompleted = promptWithCompletion.completion != null,&#10;                    isLoading = false,&#10;                    error = null&#10;                )&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    isLoading = false,&#10;                    error = &quot;Failed to load daily prompt: ${e.message}&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadCurrentStreak() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val userProgress = repository.getUserProgress()&#10;                _uiState.value = _uiState.value.copy(&#10;                    currentStreak = userProgress.currentStreak,&#10;                    bestStreak = userProgress.bestStreak,&#10;                    totalCompleted = userProgress.totalCompleted,&#10;                    userProgress = userProgress&#10;                )&#10;            } catch (e: Exception) {&#10;                // Handle error silently for streak, it's not critical&#10;            }&#10;        }&#10;    }&#10;&#10;    fun markAsCompleted(notes: String = &quot;&quot;) {&#10;        viewModelScope.launch {&#10;            try {&#10;                val currentPrompt = _uiState.value.dailyPrompt?.prompt&#10;                if (currentPrompt != null) {&#10;                    val today = Date()&#10;                    val completionId = repository.markPromptAsCompleted(currentPrompt.id, today, notes)&#10;&#10;                    // Update streak and get updated progress&#10;                    val updatedProgress = repository.updateStreakOnCompletion(today)&#10;&#10;                    // Check for milestone celebration&#10;                    val milestones = repository.getStreakMilestones(updatedProgress.currentStreak)&#10;                    val shouldCelebrate = milestones.isNotEmpty()&#10;&#10;                    // Update UI state&#10;                    val dateFormatter = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;                    val completion = KindnessCompletion(&#10;                        id = completionId,&#10;                        promptId = currentPrompt.id,&#10;                        completedDate = dateFormatter.format(today),&#10;                        notes = notes&#10;                    )&#10;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        dailyPrompt = _uiState.value.dailyPrompt?.copy(completion = completion),&#10;                        isCompleted = true,&#10;                        currentStreak = updatedProgress.currentStreak,&#10;                        bestStreak = updatedProgress.bestStreak,&#10;                        totalCompleted = updatedProgress.totalCompleted,&#10;                        userProgress = updatedProgress,&#10;                        showCelebration = shouldCelebrate,&#10;                        celebrationMilestone = milestones.firstOrNull()&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    error = &quot;Failed to mark as completed: ${e.message}&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun toggleFavorite() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val completion = _uiState.value.dailyPrompt?.completion&#10;                if (completion != null) {&#10;                    repository.toggleFavorite(completion)&#10;&#10;                    // Update UI state&#10;                    _uiState.value = _uiState.value.copy(&#10;                        dailyPrompt = _uiState.value.dailyPrompt?.copy(&#10;                            completion = completion.copy(isFavorite = !completion.isFavorite)&#10;                        )&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    error = &quot;Failed to toggle favorite: ${e.message}&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun clearError() {&#10;        _uiState.value = _uiState.value.copy(error = null)&#10;    }&#10;&#10;    fun refreshPrompt() {&#10;        loadDailyPrompt()&#10;        loadCurrentStreak()&#10;    }&#10;&#10;    fun skipCurrentPrompt() {&#10;        viewModelScope.launch {&#10;            try {&#10;                val currentPrompt = _uiState.value.dailyPrompt?.prompt&#10;                if (currentPrompt != null) {&#10;                    // Skip the current prompt&#10;                    repository.skipPrompt(currentPrompt.id, Date())&#10;&#10;                    // Get the next available prompt&#10;                    val nextPrompt = repository.getNextAvailablePrompt()&#10;&#10;                    // Update UI state with the new prompt&#10;                    _uiState.value = _uiState.value.copy(&#10;                        dailyPrompt = nextPrompt,&#10;                        isCompleted = false // New prompt is not completed&#10;                    )&#10;&#10;                    // Clean up old skipped prompts (keep only last 7 days)&#10;                    repository.cleanupOldSkippedPrompts()&#10;                }&#10;            } catch (e: Exception) {&#10;                _uiState.value = _uiState.value.copy(&#10;                    error = &quot;Failed to skip prompt: ${e.message}&quot;&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    fun dismissCelebration() {&#10;        _uiState.value = _uiState.value.copy(&#10;            showCelebration = false,&#10;            celebrationMilestone = null&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/home/HomeViewModelFactory.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/home/HomeViewModelFactory.kt" />
              <option name="originalContent" value="package com.example.kindspark.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.kindspark.data.KindnessRepository&#10;import com.example.kindspark.data.PreferencesManager&#10;import com.example.kindspark.notifications.DailyNotificationScheduler&#10;&#10;class HomeViewModelFactory(&#10;    private val repository: KindnessRepository,&#10;    private val preferencesManager: PreferencesManager,&#10;    private val notificationScheduler: DailyNotificationScheduler&#10;) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return HomeViewModel(repository, preferencesManager, notificationScheduler) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.ui.home&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import com.example.kindspark.data.KindnessRepository&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.notifications.NotificationScheduler&#10;&#10;class HomeViewModelFactory(&#10;    private val repository: KindnessRepository,&#10;    private val userPreferencesManager: UserPreferencesManager,&#10;    private val notificationScheduler: NotificationScheduler&#10;) : ViewModelProvider.Factory {&#10;    override fun &lt;T : ViewModel&gt; create(modelClass: Class&lt;T&gt;): T {&#10;        if (modelClass.isAssignableFrom(HomeViewModel::class.java)) {&#10;            @Suppress(&quot;UNCHECKED_CAST&quot;)&#10;            return HomeViewModel(repository, userPreferencesManager, notificationScheduler) as T&#10;        }&#10;        throw IllegalArgumentException(&quot;Unknown ViewModel class&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/AnimatedBellIcon.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/AnimatedBellIcon.kt" />
              <option name="updatedContent" value="package com.example.kindspark.ui.icons&#10;&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.materialIcon&#10;import androidx.compose.material.icons.materialPath&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.drawscope.DrawScope&#10;import androidx.compose.ui.graphics.drawscope.rotate&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.unit.dp&#10;import kotlin.math.sin&#10;&#10;public val Icons.Outlined.AnimatedBell: ImageVector&#10;    get() {&#10;        if (_animatedBell != null) {&#10;            return _animatedBell!!&#10;        }&#10;        _animatedBell = materialIcon(name = &quot;AnimatedBell&quot;) {&#10;            materialPath {&#10;                // Bell body&#10;                moveTo(12.0f, 22.0f)&#10;                curveTo(13.1f, 22.0f, 14.0f, 21.1f, 14.0f, 20.0f)&#10;                horizontalLineTo(10.0f)&#10;                curveTo(10.0f, 21.1f, 10.9f, 22.0f, 12.0f, 22.0f)&#10;                close()&#10;                &#10;                moveTo(18.0f, 16.0f)&#10;                verticalLineTo(11.0f)&#10;                curveTo(18.0f, 7.93f, 16.36f, 5.36f, 13.5f, 4.68f)&#10;                verticalLineTo(4.0f)&#10;                curveTo(13.5f, 3.17f, 12.83f, 2.5f, 12.0f, 2.5f)&#10;                curveTo(11.17f, 2.5f, 10.5f, 3.17f, 10.5f, 4.0f)&#10;                verticalLineTo(4.68f)&#10;                curveTo(7.63f, 5.36f, 6.0f, 7.92f, 6.0f, 11.0f)&#10;                verticalLineTo(16.0f)&#10;                lineTo(4.0f, 18.0f)&#10;                verticalLineTo(19.0f)&#10;                horizontalLineTo(20.0f)&#10;                verticalLineTo(18.0f)&#10;                lineTo(18.0f, 16.0f)&#10;                close()&#10;                &#10;                // Sound waves&#10;                moveTo(19.5f, 8.0f)&#10;                curveTo(19.5f, 6.0f, 18.5f, 4.3f, 17.0f, 3.3f)&#10;                lineTo(16.2f, 4.7f)&#10;                curveTo(17.2f, 5.4f, 17.9f, 6.6f, 17.9f, 8.0f)&#10;                curveTo(17.9f, 9.4f, 17.2f, 10.6f, 16.2f, 11.3f)&#10;                lineTo(17.0f, 12.7f)&#10;                curveTo(18.5f, 11.7f, 19.5f, 10.0f, 19.5f, 8.0f)&#10;                close()&#10;                &#10;                moveTo(4.5f, 8.0f)&#10;                curveTo(4.5f, 10.0f, 5.5f, 11.7f, 7.0f, 12.7f)&#10;                lineTo(7.8f, 11.3f)&#10;                curveTo(6.8f, 10.6f, 6.1f, 9.4f, 6.1f, 8.0f)&#10;                curveTo(6.1f, 6.6f, 6.8f, 5.4f, 7.8f, 4.7f)&#10;                lineTo(7.0f, 3.3f)&#10;                curveTo(5.5f, 4.3f, 4.5f, 6.0f, 4.5f, 8.0f)&#10;                close()&#10;            }&#10;        }&#10;        return _animatedBell!!&#10;    }&#10;&#10;private var _animatedBell: ImageVector? = null&#10;&#10;@Composable&#10;fun AnimatedBellIcon(&#10;    modifier: Modifier = Modifier,&#10;    color: Color = Color.Black,&#10;    isAnimating: Boolean = false&#10;) {&#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;bell_animation&quot;)&#10;    &#10;    val rotation by infiniteTransition.animateFloat(&#10;        initialValue = -10f,&#10;        targetValue = 10f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(300, easing = EaseInOutSine),&#10;            repeatMode = RepeatMode.Reverse&#10;        ),&#10;        label = &quot;bell_rotation&quot;&#10;    )&#10;    &#10;    Canvas(modifier = modifier.size(24.dp)) {&#10;        rotate(if (isAnimating) rotation else 0f) {&#10;            drawBell(color)&#10;        }&#10;    }&#10;}&#10;&#10;private fun DrawScope.drawBell(color: Color) {&#10;    val width = size.width&#10;    val height = size.height&#10;    &#10;    // Bell body path&#10;    drawPath(&#10;        path = androidx.compose.ui.graphics.Path().apply {&#10;            // Bell outline&#10;            moveTo(width * 0.5f, height * 0.1f)&#10;            cubicTo(&#10;                width * 0.3f, height * 0.1f,&#10;                width * 0.15f, height * 0.3f,&#10;                width * 0.15f, height * 0.55f&#10;            )&#10;            lineTo(width * 0.15f, height * 0.7f)&#10;            lineTo(width * 0.1f, height * 0.8f)&#10;            lineTo(width * 0.9f, height * 0.8f)&#10;            lineTo(width * 0.85f, height * 0.7f)&#10;            lineTo(width * 0.85f, height * 0.55f)&#10;            cubicTo(&#10;                width * 0.85f, height * 0.3f,&#10;                width * 0.7f, height * 0.1f,&#10;                width * 0.5f, height * 0.1f&#10;            )&#10;            close()&#10;            &#10;            // Bell clapper&#10;            moveTo(width * 0.5f, height * 0.85f)&#10;            lineTo(width * 0.45f, height * 0.95f)&#10;            lineTo(width * 0.55f, height * 0.95f)&#10;            close()&#10;        },&#10;        color = color&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/HeartIcon.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/HeartIcon.kt" />
              <option name="updatedContent" value="package com.example.kindspark.ui.icons&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.materialIcon&#10;import androidx.compose.material.icons.materialPath&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;public val Icons.Outlined.SparklingHeart: ImageVector&#10;    get() {&#10;        if (_sparklingHeart != null) {&#10;            return _sparklingHeart!!&#10;        }&#10;        _sparklingHeart = materialIcon(name = &quot;SparklingHeart&quot;) {&#10;            materialPath {&#10;                // Main heart shape&#10;                moveTo(12.0f, 21.35f)&#10;                lineTo(10.55f, 20.03f)&#10;                curveTo(5.4f, 15.36f, 2.0f, 12.27f, 2.0f, 8.5f)&#10;                curveTo(2.0f, 5.42f, 4.42f, 3.0f, 7.5f, 3.0f)&#10;                curveTo(9.24f, 3.0f, 10.91f, 3.81f, 12.0f, 5.08f)&#10;                curveTo(13.09f, 3.81f, 14.76f, 3.0f, 16.5f, 3.0f)&#10;                curveTo(19.58f, 3.0f, 22.0f, 5.42f, 22.0f, 8.5f)&#10;                curveTo(22.0f, 12.27f, 18.6f, 15.36f, 13.45f, 20.03f)&#10;                lineTo(12.0f, 21.35f)&#10;                close()&#10;                &#10;                // Sparkles around the heart&#10;                moveTo(6.0f, 2.0f)&#10;                lineTo(5.5f, 0.5f)&#10;                lineTo(4.0f, 1.0f)&#10;                lineTo(5.5f, 1.5f)&#10;                close()&#10;                &#10;                moveTo(18.0f, 2.0f)&#10;                lineTo(18.5f, 0.5f)&#10;                lineTo(20.0f, 1.0f)&#10;                lineTo(18.5f, 1.5f)&#10;                close()&#10;                &#10;                moveTo(2.0f, 6.0f)&#10;                lineTo(1.5f, 4.5f)&#10;                lineTo(0.0f, 5.0f)&#10;                lineTo(1.5f, 5.5f)&#10;                close()&#10;                &#10;                moveTo(22.0f, 6.0f)&#10;                lineTo(22.5f, 4.5f)&#10;                lineTo(24.0f, 5.0f)&#10;                lineTo(22.5f, 5.5f)&#10;                close()&#10;            }&#10;        }&#10;        return _sparklingHeart!!&#10;    }&#10;&#10;private var _sparklingHeart: ImageVector? = null&#10;&#10;public val Icons.Outlined.CloudHeart: ImageVector&#10;    get() {&#10;        if (_cloudHeart != null) {&#10;            return _cloudHeart!!&#10;        }&#10;        _cloudHeart = materialIcon(name = &quot;CloudHeart&quot;) {&#10;            materialPath {&#10;                // Cloud shape&#10;                moveTo(19.35f, 10.04f)&#10;                curveTo(18.67f, 6.59f, 15.64f, 4.0f, 12.0f, 4.0f)&#10;                curveTo(9.11f, 4.0f, 6.6f, 5.64f, 5.35f, 8.04f)&#10;                curveTo(2.34f, 8.36f, 0.0f, 10.91f, 0.0f, 14.0f)&#10;                curveTo(0.0f, 17.31f, 2.69f, 20.0f, 6.0f, 20.0f)&#10;                horizontalLineTo(19.0f)&#10;                curveTo(21.76f, 20.0f, 24.0f, 17.76f, 24.0f, 15.0f)&#10;                curveTo(24.0f, 12.36f, 21.95f, 10.22f, 19.35f, 10.04f)&#10;                close()&#10;                &#10;                moveTo(19.0f, 18.0f)&#10;                horizontalLineTo(6.0f)&#10;                curveTo(3.79f, 18.0f, 2.0f, 16.21f, 2.0f, 14.0f)&#10;                curveTo(2.0f, 11.95f, 3.53f, 10.24f, 5.56f, 10.03f)&#10;                lineTo(6.63f, 9.92f)&#10;                lineTo(7.13f, 8.97f)&#10;                curveTo(8.08f, 7.14f, 9.94f, 6.0f, 12.0f, 6.0f)&#10;                curveTo(14.62f, 6.0f, 16.88f, 7.86f, 17.39f, 10.43f)&#10;                lineTo(17.69f, 11.93f)&#10;                lineTo(19.22f, 12.04f)&#10;                curveTo(20.78f, 12.14f, 22.0f, 13.45f, 22.0f, 15.0f)&#10;                curveTo(22.0f, 16.65f, 20.65f, 18.0f, 19.0f, 18.0f)&#10;                close()&#10;                &#10;                // Heart in the cloud&#10;                moveTo(12.0f, 15.35f)&#10;                lineTo(11.22f, 14.62f)&#10;                curveTo(9.55f, 13.06f, 8.5f, 12.1f, 8.5f, 10.9f)&#10;                curveTo(8.5f, 9.95f, 9.2f, 9.25f, 10.15f, 9.25f)&#10;                curveTo(10.75f, 9.25f, 11.33f, 9.55f, 12.0f, 10.08f)&#10;                curveTo(12.67f, 9.55f, 13.25f, 9.25f, 13.85f, 9.25f)&#10;                curveTo(14.8f, 9.25f, 15.5f, 9.95f, 15.5f, 10.9f)&#10;                curveTo(15.5f, 12.1f, 14.45f, 13.06f, 12.78f, 14.62f)&#10;                lineTo(12.0f, 15.35f)&#10;                close()&#10;            }&#10;        }&#10;        return _cloudHeart!!&#10;    }&#10;&#10;private var _cloudHeart: ImageVector? = null" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/Icons.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/Icons.kt" />
              <option name="updatedContent" value="package com.example.kindspark.ui.icons&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.materialIcon&#10;import androidx.compose.material.icons.materialPath&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;public val Icons.Outlined.CustomPalette: ImageVector&#10;    get() {&#10;        if (_customPalette != null) {&#10;            return _customPalette!!&#10;        }&#10;        _customPalette = materialIcon(name = &quot;CustomPalette&quot;) {&#10;            materialPath {&#10;                moveTo(12.0f, 3.0f)&#10;                curveTo(16.97f, 3.0f, 21.0f, 7.03f, 21.0f, 12.0f)&#10;                curveTo(21.0f, 13.66f, 20.33f, 15.64f, 19.0f, 16.97f)&#10;                curveTo(17.66f, 18.31f, 15.66f, 19.0f, 13.0f, 19.0f)&#10;                horizontalLineTo(9.5f)&#10;                curveTo(8.67f, 19.0f, 8.0f, 18.33f, 8.0f, 17.5f)&#10;                curveTo(8.0f, 16.67f, 8.67f, 16.0f, 9.5f, 16.0f)&#10;                horizontalLineTo(13.0f)&#10;                curveTo(14.66f, 16.0f, 16.0f, 14.66f, 16.0f, 13.0f)&#10;                curveTo(16.0f, 11.34f, 14.66f, 10.0f, 13.0f, 10.0f)&#10;                horizontalLineTo(12.0f)&#10;                curveTo(7.03f, 10.0f, 3.0f, 6.97f, 3.0f, 2.0f)&#10;                close()&#10;                &#10;                // Color dots&#10;                moveTo(9.5f, 9.0f)&#10;                curveTo(10.33f, 9.0f, 11.0f, 8.33f, 11.0f, 7.5f)&#10;                curveTo(11.0f, 6.67f, 10.33f, 6.0f, 9.5f, 6.0f)&#10;                curveTo(8.67f, 6.0f, 8.0f, 6.67f, 8.0f, 7.5f)&#10;                curveTo(8.0f, 8.33f, 8.67f, 9.0f, 9.5f, 9.0f)&#10;                close()&#10;                &#10;                moveTo(14.5f, 9.0f)&#10;                curveTo(15.33f, 9.0f, 16.0f, 8.33f, 16.0f, 7.5f)&#10;                curveTo(16.0f, 6.67f, 15.33f, 6.0f, 14.5f, 6.0f)&#10;                curveTo(13.67f, 6.0f, 13.0f, 6.67f, 13.0f, 7.5f)&#10;                curveTo(13.0f, 8.33f, 13.67f, 9.0f, 14.5f, 9.0f)&#10;                close()&#10;                &#10;                moveTo(7.5f, 12.0f)&#10;                curveTo(8.33f, 12.0f, 9.0f, 11.33f, 9.0f, 10.5f)&#10;                curveTo(9.0f, 9.67f, 8.33f, 9.0f, 7.5f, 9.0f)&#10;                curveTo(6.67f, 9.0f, 6.0f, 9.67f, 6.0f, 10.5f)&#10;                curveTo(6.0f, 11.33f, 6.67f, 12.0f, 7.5f, 12.0f)&#10;                close()&#10;                &#10;                moveTo(16.5f, 12.0f)&#10;                curveTo(17.33f, 12.0f, 18.0f, 11.33f, 18.0f, 10.5f)&#10;                curveTo(18.0f, 9.67f, 17.33f, 9.0f, 16.5f, 9.0f)&#10;                curveTo(15.67f, 9.0f, 15.0f, 9.67f, 15.0f, 10.5f)&#10;                curveTo(15.0f, 11.33f, 15.67f, 12.0f, 16.5f, 12.0f)&#10;                close()&#10;            }&#10;        }&#10;        return _customPalette!!&#10;    }&#10;&#10;private var _customPalette: ImageVector? = null&#10;&#10;public val Icons.Outlined.CustomLandscape: ImageVector&#10;    get() {&#10;        if (_customLandscape != null) {&#10;            return _customLandscape!!&#10;        }&#10;        _customLandscape = materialIcon(name = &quot;CustomLandscape&quot;) {&#10;            materialPath {&#10;                moveTo(14.0f, 6.0f)&#10;                lineTo(10.25f, 11.0f)&#10;                lineTo(13.25f, 15.0f)&#10;                horizontalLineTo(5.0f)&#10;                lineTo(8.5f, 10.0f)&#10;                lineTo(6.5f, 7.0f)&#10;                lineTo(9.0f, 3.0f)&#10;                close()&#10;                &#10;                moveTo(21.5f, 11.0f)&#10;                lineTo(18.5f, 15.0f)&#10;                horizontalLineTo(15.5f)&#10;                lineTo(19.0f, 10.0f)&#10;                close()&#10;                &#10;                // Ground line&#10;                moveTo(2.0f, 19.0f)&#10;                horizontalLineTo(22.0f)&#10;                verticalLineTo(21.0f)&#10;                horizontalLineTo(2.0f)&#10;                close()&#10;            }&#10;        }&#10;        return _customLandscape!!&#10;    }&#10;&#10;private var _customLandscape: ImageVector? = null&#10;&#10;public val Icons.Outlined.CustomAutoAwesome: ImageVector&#10;    get() {&#10;        if (_customAutoAwesome != null) {&#10;            return _customAutoAwesome!!&#10;        }&#10;        _customAutoAwesome = materialIcon(name = &quot;CustomAutoAwesome&quot;) {&#10;            materialPath {&#10;                // Main star&#10;                moveTo(19.0f, 9.0f)&#10;                lineTo(20.25f, 6.25f)&#10;                lineTo(23.0f, 5.0f)&#10;                lineTo(20.25f, 3.75f)&#10;                lineTo(19.0f, 1.0f)&#10;                lineTo(17.75f, 3.75f)&#10;                lineTo(15.0f, 5.0f)&#10;                lineTo(17.75f, 6.25f)&#10;                close()&#10;                &#10;                // Secondary star&#10;                moveTo(19.0f, 15.0f)&#10;                lineTo(17.75f, 17.75f)&#10;                lineTo(15.0f, 19.0f)&#10;                lineTo(17.75f, 20.25f)&#10;                lineTo(19.0f, 23.0f)&#10;                lineTo(20.25f, 20.25f)&#10;                lineTo(23.0f, 19.0f)&#10;                lineTo(20.25f, 17.75f)&#10;                close()&#10;                &#10;                // Left star&#10;                moveTo(11.5f, 9.5f)&#10;                lineTo(10.0f, 6.0f)&#10;                lineTo(6.5f, 4.5f)&#10;                lineTo(10.0f, 3.0f)&#10;                lineTo(11.5f, -0.5f)&#10;                lineTo(13.0f, 3.0f)&#10;                lineTo(16.5f, 4.5f)&#10;                lineTo(13.0f, 6.0f)&#10;                close()&#10;                &#10;                // Small sparkle&#10;                moveTo(7.0f, 14.0f)&#10;                lineTo(6.0f, 11.5f)&#10;                lineTo(3.5f, 10.5f)&#10;                lineTo(6.0f, 9.5f)&#10;                lineTo(7.0f, 7.0f)&#10;                lineTo(8.0f, 9.5f)&#10;                lineTo(10.5f, 10.5f)&#10;                lineTo(8.0f, 11.5f)&#10;                close()&#10;            }&#10;        }&#10;        return _customAutoAwesome!!&#10;    }&#10;&#10;private var _customAutoAwesome: ImageVector? = null&#10;&#10;public val Icons.Outlined.CustomSchedule: ImageVector&#10;    get() {&#10;        if (_customSchedule != null) {&#10;            return _customSchedule!!&#10;        }&#10;        _customSchedule = materialIcon(name = &quot;CustomSchedule&quot;) {&#10;            materialPath {&#10;                // Clock circle&#10;                moveTo(12.0f, 2.0f)&#10;                curveTo(6.48f, 2.0f, 2.0f, 6.48f, 2.0f, 12.0f)&#10;                curveTo(2.0f, 17.52f, 6.48f, 22.0f, 12.0f, 22.0f)&#10;                curveTo(17.52f, 22.0f, 22.0f, 17.52f, 22.0f, 12.0f)&#10;                curveTo(22.0f, 6.48f, 17.52f, 2.0f, 12.0f, 2.0f)&#10;                close()&#10;                &#10;                moveTo(12.0f, 20.0f)&#10;                curveTo(7.59f, 20.0f, 4.0f, 16.41f, 4.0f, 12.0f)&#10;                curveTo(4.0f, 7.59f, 7.59f, 4.0f, 12.0f, 4.0f)&#10;                curveTo(16.41f, 4.0f, 20.0f, 7.59f, 20.0f, 12.0f)&#10;                curveTo(20.0f, 16.41f, 16.41f, 20.0f, 12.0f, 20.0f)&#10;                close()&#10;                &#10;                // Clock hands&#10;                moveTo(12.5f, 7.0f)&#10;                horizontalLineTo(11.0f)&#10;                verticalLineTo(13.0f)&#10;                lineTo(16.25f, 16.15f)&#10;                lineTo(17.0f, 14.92f)&#10;                lineTo(12.5f, 12.25f)&#10;                close()&#10;                &#10;                // Spark trail&#10;                moveTo(19.5f, 3.5f)&#10;                lineTo(18.5f, 2.5f)&#10;                lineTo(20.5f, 0.5f)&#10;                lineTo(21.5f, 1.5f)&#10;                close()&#10;                &#10;                moveTo(21.5f, 5.5f)&#10;                lineTo(20.5f, 4.5f)&#10;                lineTo(23.5f, 1.5f)&#10;                lineTo(24.5f, 2.5f)&#10;                close()&#10;            }&#10;        }&#10;        return _customSchedule!!&#10;    }&#10;&#10;private var _customSchedule: ImageVector? = null&#10;&#10;public val Icons.Outlined.CustomVolumeUp: ImageVector&#10;    get() {&#10;        if (_customVolumeUp != null) {&#10;            return _customVolumeUp!!&#10;        }&#10;        _customVolumeUp = materialIcon(name = &quot;CustomVolumeUp&quot;) {&#10;            materialPath {&#10;                // Speaker cone&#10;                moveTo(3.0f, 9.0f)&#10;                verticalLineTo(15.0f)&#10;                horizontalLineTo(7.0f)&#10;                lineTo(12.0f, 20.0f)&#10;                verticalLineTo(4.0f)&#10;                lineTo(7.0f, 9.0f)&#10;                horizontalLineTo(3.0f)&#10;                close()&#10;                &#10;                // Sound waves&#10;                moveTo(16.5f, 12.0f)&#10;                curveTo(16.5f, 10.23f, 15.48f, 8.71f, 14.0f, 7.97f)&#10;                verticalLineTo(16.02f)&#10;                curveTo(15.48f, 15.29f, 16.5f, 13.77f, 16.5f, 12.0f)&#10;                close()&#10;                &#10;                moveTo(14.0f, 3.23f)&#10;                verticalLineTo(5.29f)&#10;                curveTo(16.89f, 6.15f, 19.0f, 8.83f, 19.0f, 12.0f)&#10;                curveTo(19.0f, 15.17f, 16.89f, 17.85f, 14.0f, 18.71f)&#10;                verticalLineTo(20.77f)&#10;                curveTo(18.01f, 19.86f, 21.0f, 16.28f, 21.0f, 12.0f)&#10;                curveTo(21.0f, 7.72f, 18.01f, 4.14f, 14.0f, 3.23f)&#10;                close()&#10;            }&#10;        }&#10;        return _customVolumeUp!!&#10;    }&#10;&#10;private var _customVolumeUp: ImageVector? = null" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/TrophyIcon.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/icons/TrophyIcon.kt" />
              <option name="updatedContent" value="package com.example.kindspark.ui.icons&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.materialIcon&#10;import androidx.compose.material.icons.materialPath&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;public val Icons.Outlined.TrophyWithConfetti: ImageVector&#10;    get() {&#10;        if (_trophyWithConfetti != null) {&#10;            return _trophyWithConfetti!!&#10;        }&#10;        _trophyWithConfetti = materialIcon(name = &quot;TrophyWithConfetti&quot;) {&#10;            materialPath {&#10;                // Trophy cup&#10;                moveTo(12.0f, 15.0f)&#10;                curveTo(14.21f, 15.0f, 16.0f, 13.21f, 16.0f, 11.0f)&#10;                verticalLineTo(7.0f)&#10;                curveTo(16.0f, 4.79f, 14.21f, 3.0f, 12.0f, 3.0f)&#10;                curveTo(9.79f, 3.0f, 8.0f, 4.79f, 8.0f, 7.0f)&#10;                verticalLineTo(11.0f)&#10;                curveTo(8.0f, 13.21f, 9.79f, 15.0f, 12.0f, 15.0f)&#10;                close()&#10;                &#10;                // Trophy handles&#10;                moveTo(6.0f, 6.0f)&#10;                curveTo(4.9f, 6.0f, 4.0f, 6.9f, 4.0f, 8.0f)&#10;                verticalLineTo(9.0f)&#10;                curveTo(4.0f, 10.1f, 4.9f, 11.0f, 6.0f, 11.0f)&#10;                horizontalLineTo(8.0f)&#10;                verticalLineTo(9.0f)&#10;                horizontalLineTo(6.0f)&#10;                verticalLineTo(6.0f)&#10;                close()&#10;                &#10;                moveTo(18.0f, 6.0f)&#10;                verticalLineTo(9.0f)&#10;                horizontalLineTo(16.0f)&#10;                verticalLineTo(11.0f)&#10;                horizontalLineTo(18.0f)&#10;                curveTo(19.1f, 11.0f, 20.0f, 10.1f, 20.0f, 9.0f)&#10;                verticalLineTo(8.0f)&#10;                curveTo(20.0f, 6.9f, 19.1f, 6.0f, 18.0f, 6.0f)&#10;                close()&#10;                &#10;                // Trophy base&#10;                moveTo(10.0f, 17.0f)&#10;                horizontalLineTo(14.0f)&#10;                verticalLineTo(19.0f)&#10;                horizontalLineTo(10.0f)&#10;                close()&#10;                &#10;                moveTo(8.0f, 19.0f)&#10;                horizontalLineTo(16.0f)&#10;                verticalLineTo(21.0f)&#10;                horizontalLineTo(8.0f)&#10;                close()&#10;                &#10;                // Confetti particles&#10;                moveTo(3.0f, 3.0f)&#10;                horizontalLineTo(4.0f)&#10;                verticalLineTo(4.0f)&#10;                horizontalLineTo(3.0f)&#10;                close()&#10;                &#10;                moveTo(20.0f, 2.0f)&#10;                horizontalLineTo(21.0f)&#10;                verticalLineTo(3.0f)&#10;                horizontalLineTo(20.0f)&#10;                close()&#10;                &#10;                moveTo(2.0f, 12.0f)&#10;                horizontalLineTo(3.0f)&#10;                verticalLineTo(13.0f)&#10;                horizontalLineTo(2.0f)&#10;                close()&#10;                &#10;                moveTo(21.0f, 13.0f)&#10;                horizontalLineTo(22.0f)&#10;                verticalLineTo(14.0f)&#10;                horizontalLineTo(21.0f)&#10;                close()&#10;                &#10;                moveTo(4.0f, 16.0f)&#10;                horizontalLineTo(5.0f)&#10;                verticalLineTo(17.0f)&#10;                horizontalLineTo(4.0f)&#10;                close()&#10;                &#10;                moveTo(19.0f, 15.0f)&#10;                horizontalLineTo(20.0f)&#10;                verticalLineTo(16.0f)&#10;                horizontalLineTo(19.0f)&#10;                close()&#10;                &#10;                // Confetti diamonds&#10;                moveTo(5.5f, 5.0f)&#10;                lineTo(6.0f, 4.5f)&#10;                lineTo(6.5f, 5.0f)&#10;                lineTo(6.0f, 5.5f)&#10;                close()&#10;                &#10;                moveTo(18.5f, 4.0f)&#10;                lineTo(19.0f, 3.5f)&#10;                lineTo(19.5f, 4.0f)&#10;                lineTo(19.0f, 4.5f)&#10;                close()&#10;                &#10;                moveTo(1.5f, 8.0f)&#10;                lineTo(2.0f, 7.5f)&#10;                lineTo(2.5f, 8.0f)&#10;                lineTo(2.0f, 8.5f)&#10;                close()&#10;                &#10;                moveTo(22.5f, 9.0f)&#10;                lineTo(23.0f, 8.5f)&#10;                lineTo(23.5f, 9.0f)&#10;                lineTo(23.0f, 9.5f)&#10;                close()&#10;            }&#10;        }&#10;        return _trophyWithConfetti!!&#10;    }&#10;&#10;private var _trophyWithConfetti: ImageVector? = null&#10;&#10;public val Icons.Outlined.AchievementStar: ImageVector&#10;    get() {&#10;        if (_achievementStar != null) {&#10;            return _achievementStar!!&#10;        }&#10;        _achievementStar = materialIcon(name = &quot;AchievementStar&quot;) {&#10;            materialPath {&#10;                // Star shape&#10;                moveTo(12.0f, 2.0f)&#10;                lineTo(15.09f, 8.26f)&#10;                lineTo(22.0f, 9.27f)&#10;                lineTo(17.0f, 14.14f)&#10;                lineTo(18.18f, 21.02f)&#10;                lineTo(12.0f, 17.77f)&#10;                lineTo(5.82f, 21.02f)&#10;                lineTo(7.0f, 14.14f)&#10;                lineTo(2.0f, 9.27f)&#10;                lineTo(8.91f, 8.26f)&#10;                lineTo(12.0f, 2.0f)&#10;                close()&#10;                &#10;                // Inner star highlight&#10;                moveTo(12.0f, 6.0f)&#10;                lineTo(13.5f, 9.5f)&#10;                lineTo(17.0f, 10.0f)&#10;                lineTo(14.5f, 12.4f)&#10;                lineTo(15.1f, 15.9f)&#10;                lineTo(12.0f, 14.3f)&#10;                lineTo(8.9f, 15.9f)&#10;                lineTo(9.5f, 12.4f)&#10;                lineTo(7.0f, 10.0f)&#10;                lineTo(10.5f, 9.5f)&#10;                lineTo(12.0f, 6.0f)&#10;                close()&#10;            }&#10;        }&#10;        return _achievementStar!!&#10;    }&#10;&#10;private var _achievementStar: ImageVector? = null" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/settings/SettingsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/settings/SettingsScreen.kt" />
              <option name="originalContent" value="package com.example.kindspark.ui.settings&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    viewModel: SettingsViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var showIntervalDialog by remember { mutableStateOf(false) }&#10;    var showThemeDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;Settings&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        )&#10;&#10;        if (uiState.isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            // Settings List&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp)&#10;            ) {&#10;                Column {&#10;                    // Notifications Section&#10;                    SettingSectionHeader(title = &quot;Notifications&quot;)&#10;&#10;                    SettingItem(&#10;                        icon = Icons.Default.Notifications,&#10;                        title = &quot;Daily Reminders&quot;,&#10;                        subtitle = &quot;Get reminded to perform daily acts of kindness&quot;,&#10;                        trailing = {&#10;                            Switch(&#10;                                checked = uiState.notificationEnabled,&#10;                                onCheckedChange = { viewModel.updateNotificationEnabled(it) }&#10;                            )&#10;                        }&#10;                    )&#10;&#10;                    if (uiState.notificationEnabled) {&#10;                        SettingItem(&#10;                            icon = Icons.Default.DateRange,&#10;                            title = &quot;Notification Frequency&quot;,&#10;                            subtitle = uiState.notificationInterval.displayName,&#10;                            onClick = { showIntervalDialog = true }&#10;                        )&#10;&#10;                        SettingItem(&#10;                            icon = Icons.Default.Notifications,&#10;                            title = &quot;Notification Sound&quot;,&#10;                            subtitle = &quot;Play sound with notifications&quot;,&#10;                            trailing = {&#10;                                Switch(&#10;                                    checked = uiState.notificationSound,&#10;                                    onCheckedChange = { viewModel.updateNotificationSound(it) }&#10;                                )&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    HorizontalDivider(modifier = Modifier.padding(horizontal = 16.dp))&#10;&#10;                    // Appearance Section&#10;                    SettingSectionHeader(title = &quot;Appearance&quot;)&#10;&#10;                    SettingItem(&#10;                        icon = Icons.Default.Settings,&#10;                        title = &quot;App Theme&quot;,&#10;                        subtitle = uiState.selectedTheme.displayName,&#10;                        onClick = { showThemeDialog = true }&#10;                    )&#10;&#10;                    SettingItem(&#10;                        icon = Icons.Default.Star,&#10;                        title = &quot;Calming Backgrounds&quot;,&#10;                        subtitle = &quot;Use gentle gradient backgrounds&quot;,&#10;                        trailing = {&#10;                            Switch(&#10;                                checked = uiState.calmingBackground,&#10;                                onCheckedChange = { viewModel.updateCalmingBackground(it) }&#10;                            )&#10;                        }&#10;                    )&#10;&#10;                    HorizontalDivider(modifier = Modifier.padding(horizontal = 16.dp))&#10;&#10;                    // Experience Section&#10;                    SettingSectionHeader(title = &quot;Experience&quot;)&#10;&#10;                    SettingItem(&#10;                        icon = Icons.Default.Star,&#10;                        title = &quot;Celebration Animations&quot;,&#10;                        subtitle = &quot;Show animations when completing tasks&quot;,&#10;                        trailing = {&#10;                            Switch(&#10;                                checked = uiState.lottieAnimations,&#10;                                onCheckedChange = { viewModel.updateLottieAnimations(it) }&#10;                            )&#10;                        }&#10;                    )&#10;&#10;                    HorizontalDivider(modifier = Modifier.padding(horizontal = 16.dp))&#10;&#10;                    // About Section&#10;                    SettingSectionHeader(title = &quot;About&quot;)&#10;&#10;                    SettingItem(&#10;                        icon = Icons.Default.Info,&#10;                        title = &quot;Version&quot;,&#10;                        subtitle = &quot;2.0.0 - Enhanced with Phase 1 &amp; 2 Features&quot;&#10;                    )&#10;&#10;                    SettingItem(&#10;                        icon = Icons.Default.Favorite,&#10;                        title = &quot;Made with ❤️&quot;,&#10;                        subtitle = &quot;Spreading kindness one act at a time&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;&#10;    // Notification Interval Dialog&#10;    if (showIntervalDialog) {&#10;        NotificationIntervalDialog(&#10;            currentInterval = uiState.notificationInterval,&#10;            onIntervalSelected = { interval -&gt;&#10;                viewModel.updateNotificationInterval(interval)&#10;                showIntervalDialog = false&#10;            },&#10;            onDismiss = { showIntervalDialog = false }&#10;        )&#10;    }&#10;&#10;    // Theme Selection Dialog&#10;    if (showThemeDialog) {&#10;        ThemeSelectionDialog(&#10;            currentTheme = uiState.selectedTheme,&#10;            onThemeSelected = { theme -&gt;&#10;                viewModel.updateSelectedTheme(theme)&#10;                showThemeDialog = false&#10;            },&#10;            onDismiss = { showThemeDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SettingSectionHeader(&#10;    title: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Text(&#10;        text = title,&#10;        style = MaterialTheme.typography.titleSmall,&#10;        color = MaterialTheme.colorScheme.primary,&#10;        fontWeight = FontWeight.Bold,&#10;        modifier = modifier.padding(16.dp)&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun SettingItem(&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    title: String,&#10;    subtitle: String,&#10;    modifier: Modifier = Modifier,&#10;    trailing: @Composable (() -&gt; Unit)? = null,&#10;    onClick: (() -&gt; Unit)? = null&#10;) {&#10;    val itemModifier = if (onClick != null) {&#10;        modifier.then(Modifier.clickable { onClick() })&#10;    } else {&#10;        modifier&#10;    }&#10;&#10;    ListItem(&#10;        headlineContent = { Text(title) },&#10;        supportingContent = { Text(subtitle, color = MaterialTheme.colorScheme.onSurfaceVariant) },&#10;        leadingContent = {&#10;            Icon(&#10;                icon,&#10;                contentDescription = null,&#10;                tint = MaterialTheme.colorScheme.primary&#10;            )&#10;        },&#10;        trailingContent = trailing,&#10;        modifier = itemModifier&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun NotificationIntervalDialog(&#10;    currentInterval: UserPreferencesManager.NotificationInterval,&#10;    onIntervalSelected: (UserPreferencesManager.NotificationInterval) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val intervals = UserPreferencesManager.NotificationInterval.values()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&quot;Select Notification Frequency&quot;)&#10;        },&#10;        text = {&#10;            Column {&#10;                intervals.forEach { interval -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { onIntervalSelected(interval) }&#10;                            .padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        RadioButton(&#10;                            selected = interval == currentInterval,&#10;                            onClick = { onIntervalSelected(interval) }&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(interval.displayName)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {},&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun ThemeSelectionDialog(&#10;    currentTheme: UserPreferencesManager.AppTheme,&#10;    onThemeSelected: (UserPreferencesManager.AppTheme) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    val themes = UserPreferencesManager.AppTheme.values()&#10;&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Text(&quot;Select App Theme&quot;)&#10;        },&#10;        text = {&#10;            Column {&#10;                themes.forEach { theme -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { onThemeSelected(theme) }&#10;                            .padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        RadioButton(&#10;                            selected = theme == currentTheme,&#10;                            onClick = { onThemeSelected(theme) }&#10;                        )&#10;                        Spacer(modifier = Modifier.width(8.dp))&#10;                        Text(theme.displayName)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {},&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.ui.settings&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.saveable.rememberSaveable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.ui.components.*&#10;import com.example.kindspark.ui.icons.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun SettingsScreen(&#10;    viewModel: SettingsViewModel,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var showIntervalDialog by remember { mutableStateOf(false) }&#10;    var showResetDialog by remember { mutableStateOf(false) }&#10;&#10;    // State for expandable sections&#10;    var themeExpanded by rememberSaveable { mutableStateOf(true) }&#10;    var notificationsExpanded by rememberSaveable { mutableStateOf(true) }&#10;    var aboutExpanded by rememberSaveable { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Modern Header&#10;        Text(&#10;            text = &quot;Settings&quot;,&#10;            style = MaterialTheme.typography.headlineLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary,&#10;            textAlign = TextAlign.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(24.dp)&#10;        )&#10;&#10;        if (uiState.isLoading) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else {&#10;            // Theme Section&#10;            ModernSettingSection(&#10;                title = &quot;Theme&quot;,&#10;                isExpanded = themeExpanded,&#10;                onToggleExpanded = { themeExpanded = !themeExpanded }&#10;            ) {&#10;                ModernSettingItem(&#10;                    icon = Icons.Outlined.CustomPalette,&#10;                    title = &quot;App Theme&quot;,&#10;                    subtitle = &quot;Choose your preferred visual style&quot;&#10;                )&#10;&#10;                // Dynamic Theme Previews&#10;                LazyRow(&#10;                    modifier = Modifier.padding(horizontal = 20.dp),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(UserPreferencesManager.AppTheme.values()) { theme -&gt;&#10;                        ThemePreviewCard(&#10;                            theme = theme,&#10;                            isSelected = theme == uiState.selectedTheme,&#10;                            onClick = { viewModel.updateSelectedTheme(theme) }&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                ModernSettingItem(&#10;                    icon = Icons.Outlined.CustomLandscape,&#10;                    title = &quot;Calming Backgrounds&quot;,&#10;                    subtitle = &quot;Use gentle gradient backgrounds&quot;,&#10;                    trailing = {&#10;                        ModernSwitch(&#10;                            checked = uiState.calmingBackground,&#10;                            onCheckedChange = { viewModel.updateCalmingBackground(it) }&#10;                        )&#10;                    }&#10;                )&#10;&#10;                ModernSettingItem(&#10;                    icon = Icons.Outlined.CustomAutoAwesome,&#10;                    title = &quot;Celebration Animations&quot;,&#10;                    subtitle = &quot;Show animations when completing tasks&quot;,&#10;                    trailing = {&#10;                        ModernSwitch(&#10;                            checked = uiState.lottieAnimations,&#10;                            onCheckedChange = { viewModel.updateLottieAnimations(it) }&#10;                        )&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Notifications Section&#10;            ModernSettingSection(&#10;                title = &quot;Notifications&quot;,&#10;                isExpanded = notificationsExpanded,&#10;                onToggleExpanded = { notificationsExpanded = !notificationsExpanded }&#10;            ) {&#10;                ModernSettingItem(&#10;                    icon = Icons.Outlined.AnimatedBell,&#10;                    title = &quot;Daily Reminders&quot;,&#10;                    subtitle = &quot;Get reminded to perform daily acts of kindness&quot;,&#10;                    trailing = {&#10;                        ModernSwitch(&#10;                            checked = uiState.notificationEnabled,&#10;                            onCheckedChange = { viewModel.updateNotificationEnabled(it) }&#10;                        )&#10;                    }&#10;                )&#10;&#10;                if (uiState.notificationEnabled) {&#10;                    ModernSettingItem(&#10;                        icon = Icons.Outlined.CustomSchedule,&#10;                        title = &quot;Notification Frequency&quot;,&#10;                        subtitle = uiState.notificationInterval.displayName,&#10;                        onClick = { showIntervalDialog = true }&#10;                    )&#10;&#10;                    ModernSettingItem(&#10;                        icon = Icons.Outlined.CustomVolumeUp,&#10;                        title = &quot;Notification Sound&quot;,&#10;                        subtitle = &quot;Play sound with notifications&quot;,&#10;                        trailing = {&#10;                            ModernSwitch(&#10;                                checked = uiState.notificationSound,&#10;                                onCheckedChange = { viewModel.updateNotificationSound(it) }&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // About Section&#10;            ModernSettingSection(&#10;                title = &quot;About&quot;,&#10;                isExpanded = aboutExpanded,&#10;                onToggleExpanded = { aboutExpanded = !aboutExpanded }&#10;            ) {&#10;                ModernSettingItem(&#10;                    icon = Icons.Default.Info,&#10;                    title = &quot;Version&quot;,&#10;                    subtitle = &quot;2.0.0 - Enhanced with Modern UX&quot;&#10;                )&#10;&#10;                ModernSettingItem(&#10;                    icon = Icons.Outlined.SparklingHeart,&#10;                    title = &quot;Made with ❤️&quot;,&#10;                    subtitle = &quot;Crafted to spread kindness and positivity&quot;&#10;                )&#10;&#10;                ModernSettingItem(&#10;                    icon = Icons.Outlined.AchievementStar,&#10;                    title = &quot;Rate the App&quot;,&#10;                    subtitle = &quot;Help us improve by sharing your feedback&quot;&#10;                )&#10;            }&#10;&#10;            // Reset Button at Bottom&#10;            ResetSettingsButton(&#10;                onClick = { showResetDialog = true }&#10;            )&#10;&#10;            // Add bottom padding for better scrolling experience&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;        }&#10;    }&#10;&#10;    // Notification Interval Dialog&#10;    if (showIntervalDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showIntervalDialog = false },&#10;            title = {&#10;                Text(&#10;                    text = &quot;Notification Frequency&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            },&#10;            text = {&#10;                Column {&#10;                    Text(&#10;                        text = &quot;How often would you like to receive reminders?&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    UserPreferencesManager.NotificationInterval.values().forEach { interval -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            RadioButton(&#10;                                selected = interval == uiState.notificationInterval,&#10;                                onClick = {&#10;                                    viewModel.updateNotificationInterval(interval)&#10;                                    showIntervalDialog = false&#10;                                }&#10;                            )&#10;                            Spacer(modifier = Modifier.width(12.dp))&#10;                            Text(&#10;                                text = interval.displayName,&#10;                                style = MaterialTheme.typography.bodyLarge&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = { showIntervalDialog = false }&#10;                ) {&#10;                    Text(&quot;Done&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;&#10;    // Reset Settings Dialog&#10;    if (showResetDialog) {&#10;        AlertDialog(&#10;            onDismissRequest = { showResetDialog = false },&#10;            title = {&#10;                Text(&#10;                    text = &quot;Reset Settings&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            },&#10;            text = {&#10;                Text(&#10;                    text = &quot;Are you sure you want to reset all settings to their default values? This action cannot be undone.&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        viewModel.resetToDefaults()&#10;                        showResetDialog = false&#10;                    },&#10;                    colors = ButtonDefaults.textButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Text(&quot;Reset&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(&#10;                    onClick = { showResetDialog = false }&#10;                ) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/settings/SettingsViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/kindspark/ui/settings/SettingsViewModel.kt" />
              <option name="originalContent" value="package com.example.kindspark.ui.settings&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.notifications.NotificationScheduler&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;&#10;data class SettingsUiState(&#10;    val notificationEnabled: Boolean = true,&#10;    val notificationInterval: UserPreferencesManager.NotificationInterval = UserPreferencesManager.NotificationInterval.ONCE_DAILY,&#10;    val notificationSound: Boolean = true,&#10;    val selectedTheme: UserPreferencesManager.AppTheme = UserPreferencesManager.AppTheme.LIGHT,&#10;    val calmingBackground: Boolean = true,&#10;    val lottieAnimations: Boolean = true,&#10;    val isLoading: Boolean = false&#10;)&#10;&#10;class SettingsViewModel(&#10;    private val preferencesManager: UserPreferencesManager,&#10;    private val notificationScheduler: NotificationScheduler&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(SettingsUiState())&#10;    val uiState: StateFlow&lt;SettingsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadSettings()&#10;    }&#10;&#10;    private fun loadSettings() {&#10;        viewModelScope.launch {&#10;            combine(&#10;                preferencesManager.notificationEnabled,&#10;                preferencesManager.notificationInterval,&#10;                preferencesManager.notificationSound,&#10;                preferencesManager.selectedTheme,&#10;                preferencesManager.calmingBackground,&#10;                preferencesManager.lottieAnimations&#10;            ) { values -&gt;&#10;                val notificationEnabled = values[0] as Boolean&#10;                val notificationInterval = values[1] as UserPreferencesManager.NotificationInterval&#10;                val notificationSound = values[2] as Boolean&#10;                val selectedTheme = values[3] as UserPreferencesManager.AppTheme&#10;                val calmingBackground = values[4] as Boolean&#10;                val lottieAnimations = values[5] as Boolean&#10;&#10;                SettingsUiState(&#10;                    notificationEnabled = notificationEnabled,&#10;                    notificationInterval = notificationInterval,&#10;                    notificationSound = notificationSound,&#10;                    selectedTheme = selectedTheme,&#10;                    calmingBackground = calmingBackground,&#10;                    lottieAnimations = lottieAnimations,&#10;                    isLoading = false&#10;                )&#10;            }.collect { newState -&gt;&#10;                _uiState.value = newState&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateNotificationEnabled(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateNotificationEnabled(enabled)&#10;            // Reschedule or cancel notifications based on the new setting&#10;            if (enabled) {&#10;                notificationScheduler.scheduleNotifications()&#10;            } else {&#10;                notificationScheduler.cancelNotifications()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateNotificationInterval(interval: UserPreferencesManager.NotificationInterval) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateNotificationInterval(interval)&#10;            // Reschedule notifications with the new interval&#10;            if (_uiState.value.notificationEnabled) {&#10;                notificationScheduler.rescheduleNotifications()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateNotificationSound(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateNotificationSound(enabled)&#10;        }&#10;    }&#10;&#10;    fun updateSelectedTheme(theme: UserPreferencesManager.AppTheme) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateSelectedTheme(theme)&#10;        }&#10;    }&#10;&#10;    fun updateCalmingBackground(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateCalmingBackground(enabled)&#10;        }&#10;    }&#10;&#10;    fun updateLottieAnimations(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateLottieAnimations(enabled)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.kindspark.ui.settings&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.kindspark.data.preferences.UserPreferencesManager&#10;import com.example.kindspark.notifications.NotificationScheduler&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;&#10;data class SettingsUiState(&#10;    val notificationEnabled: Boolean = true,&#10;    val notificationInterval: UserPreferencesManager.NotificationInterval = UserPreferencesManager.NotificationInterval.ONCE_DAILY,&#10;    val notificationSound: Boolean = true,&#10;    val selectedTheme: UserPreferencesManager.AppTheme = UserPreferencesManager.AppTheme.LIGHT,&#10;    val calmingBackground: Boolean = true,&#10;    val lottieAnimations: Boolean = true,&#10;    val isLoading: Boolean = false&#10;)&#10;&#10;class SettingsViewModel(&#10;    private val preferencesManager: UserPreferencesManager,&#10;    private val notificationScheduler: NotificationScheduler&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(SettingsUiState())&#10;    val uiState: StateFlow&lt;SettingsUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadSettings()&#10;    }&#10;&#10;    private fun loadSettings() {&#10;        viewModelScope.launch {&#10;            combine(&#10;                preferencesManager.notificationEnabled,&#10;                preferencesManager.notificationInterval,&#10;                preferencesManager.notificationSound,&#10;                preferencesManager.selectedTheme,&#10;                preferencesManager.calmingBackground,&#10;                preferencesManager.lottieAnimations&#10;            ) { values -&gt;&#10;                val notificationEnabled = values[0] as Boolean&#10;                val notificationInterval = values[1] as UserPreferencesManager.NotificationInterval&#10;                val notificationSound = values[2] as Boolean&#10;                val selectedTheme = values[3] as UserPreferencesManager.AppTheme&#10;                val calmingBackground = values[4] as Boolean&#10;                val lottieAnimations = values[5] as Boolean&#10;&#10;                SettingsUiState(&#10;                    notificationEnabled = notificationEnabled,&#10;                    notificationInterval = notificationInterval,&#10;                    notificationSound = notificationSound,&#10;                    selectedTheme = selectedTheme,&#10;                    calmingBackground = calmingBackground,&#10;                    lottieAnimations = lottieAnimations,&#10;                    isLoading = false&#10;                )&#10;            }.collect { newState -&gt;&#10;                _uiState.value = newState&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateNotificationEnabled(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateNotificationEnabled(enabled)&#10;            // Reschedule or cancel notifications based on the new setting&#10;            if (enabled) {&#10;                notificationScheduler.scheduleNotifications()&#10;            } else {&#10;                notificationScheduler.cancelNotifications()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateNotificationInterval(interval: UserPreferencesManager.NotificationInterval) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateNotificationInterval(interval)&#10;            // Reschedule notifications with the new interval&#10;            if (_uiState.value.notificationEnabled) {&#10;                notificationScheduler.rescheduleNotifications()&#10;            }&#10;        }&#10;    }&#10;&#10;    fun updateNotificationSound(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateNotificationSound(enabled)&#10;        }&#10;    }&#10;&#10;    fun updateSelectedTheme(theme: UserPreferencesManager.AppTheme) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateSelectedTheme(theme)&#10;        }&#10;    }&#10;&#10;    fun updateCalmingBackground(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateCalmingBackground(enabled)&#10;        }&#10;    }&#10;&#10;    fun updateLottieAnimations(enabled: Boolean) {&#10;        viewModelScope.launch {&#10;            preferencesManager.updateLottieAnimations(enabled)&#10;        }&#10;    }&#10;    &#10;    fun resetToDefaults() {&#10;        viewModelScope.launch {&#10;            preferencesManager.resetToDefaults()&#10;            // Reschedule notifications with default settings&#10;            notificationScheduler.scheduleNotifications()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>